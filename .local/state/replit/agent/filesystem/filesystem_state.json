{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sistema Central R&M - Replit Configuration\n\n## Overview\n\nSistema Central R&M is a comprehensive business management desktop application designed for \"R&M Store,\" a family-owned convenience store and bakery in CÃ³rdoba, Argentina. The system serves as the single source of truth for all business data, supporting both manual data entry and real-time API integration with a mobile AI assistant. The application manages sales, inventory, customers, suppliers, finances, and provides intelligent analytics for business optimization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **UI Components**: Shadcn/ui component library with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom design tokens and Material Icons for consistent theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Management**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth integration with session-based authentication using express-session\n- **API Security**: Custom API key validation middleware for mobile assistant integration\n- **Password Hashing**: Bcrypt for secure API key and password hashing\n\n### Database Design\n- **Database**: PostgreSQL with Neon serverless connection\n- **Schema Management**: Drizzle Kit for migrations and schema evolution\n- **Core Entities**:\n  - Users (Replit Auth integration)\n  - Products with inventory tracking\n  - Customers with credit account management\n  - Sales with itemized transactions\n  - Payments and expenses tracking\n  - Suppliers and categories management\n  - Stock movements for inventory auditing\n  - API keys for mobile assistant access\n\n### API Architecture\n- **REST API**: Express.js with TypeScript for type-safe endpoints\n- **Dual Authentication**: Web session-based auth for desktop UI, API key authentication for mobile assistant\n- **Comprehensive CRUD**: Full operations for all business entities (products, customers, sales, payments, etc.)\n- **Real-time Integration**: API endpoints designed for seamless mobile assistant integration\n- **Data Validation**: Zod schemas for request/response validation and type safety\n\n### Key Architectural Decisions\n\n**Monorepo Structure**: Single repository with shared schema types between client and server to ensure type consistency and reduce duplication.\n\n**Dual Data Entry Paradigm**: System designed to handle both manual batch entry (end-of-day reconciliation) and real-time API updates from mobile assistant, with clear visual distinction in the UI.\n\n**Type Safety First**: Full TypeScript implementation with shared types, Drizzle ORM, and Zod validation to prevent runtime errors and ensure data integrity.\n\n**Component-Driven UI**: Shadcn/ui components with Radix UI primitives provide accessible, customizable, and consistent user interface elements.\n\n**Serverless-Ready Database**: Neon PostgreSQL with connection pooling for scalability and cost-effectiveness in cloud deployment.\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling and automatic scaling\n- **Database Connection**: @neondatabase/serverless for optimized serverless database connections\n\n### Authentication & Security\n- **Replit Auth**: OpenID Connect authentication integration for user management\n- **Session Storage**: PostgreSQL-backed session storage using connect-pg-simple\n- **Password Security**: Bcrypt for hashing API keys and sensitive data\n\n### Frontend Libraries\n- **UI Framework**: React 18 with TypeScript for modern component development\n- **Component Library**: Shadcn/ui with Radix UI primitives for accessible components\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling\n- **Icons**: Material Icons and Lucide React for comprehensive iconography\n- **State Management**: TanStack Query for server state and caching\n- **Form Handling**: React Hook Form with Hookform Resolvers for form management\n- **Date Management**: date-fns for date formatting and manipulation\n- **Routing**: Wouter for lightweight client-side routing\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **TypeScript**: Full type safety across client, server, and shared code\n- **Database Tooling**: Drizzle Kit for schema migrations and database management\n- **Development Plugins**: Replit-specific plugins for cartographer and dev banner integration\n- **Code Quality**: ESBuild for fast server bundling and TypeScript compilation\n\n### Backend Dependencies\n- **Server Framework**: Express.js for robust API development\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Validation**: Zod for schema validation and type inference\n- **Utilities**: Various utility libraries for encryption, memoization, and data processing","size_bytes":5295},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Set environment explicitly based on NODE_ENV\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = 'development';\n}\napp.set('env', process.env.NODE_ENV);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Determine environment mode based on NODE_ENV for production robustness\n  const isDevelopment = process.env.NODE_ENV !== 'production';\n  const server = await registerRoutes(app, isDevelopment);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (isDevelopment) {\n    if (server) {\n      await setupVite(app, server);\n    } else {\n      throw new Error(\"HTTP server required for development mode\");\n    }\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  \n  if (isDevelopment && server) {\n    // In development, use the HTTP server for HMR support\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      log(`serving on port ${port} (development) - NODE_ENV: ${process.env.NODE_ENV}`);\n    });\n  } else {\n    // In production, use Express app directly\n    app.listen(port, \"0.0.0.0\", () => {\n      log(`serving on port ${port} (production) - NODE_ENV: ${process.env.NODE_ENV}`);\n    });\n  }\n})();\n","size_bytes":2823},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4254},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport crypto from \"crypto\";\nimport { \n  insertProductSchema,\n  insertCustomerSchema,\n  insertSaleSchema,\n  insertSaleItemSchema,\n  insertPaymentSchema,\n  insertExpenseSchema,\n  insertSupplierSchema,\n  insertCategorySchema,\n  insertApiKeySchema,\n  insertCashClosingSchema\n} from \"@shared/schema\";\n\n// Middleware to validate API key for mobile assistant\nconst validateApiKey = async (req: any, res: any, next: any) => {\n  const apiKey = req.headers['x-api-key'];\n  \n  if (!apiKey) {\n    return res.status(401).json({ message: \"API key requerida\" });\n  }\n  \n  try {\n    const hashedKey = crypto.createHash('sha256').update(apiKey).digest('hex');\n    const keyRecord = await storage.getApiKeyByHash(hashedKey);\n    \n    if (!keyRecord) {\n      return res.status(401).json({ message: \"API key invÃ¡lida\" });\n    }\n    \n    // Update last used timestamp\n    await storage.updateApiKey(keyRecord.id, { lastUsed: new Date() });\n    \n    req.apiKey = keyRecord;\n    next();\n  } catch (error) {\n    console.error(\"Error validating API key:\", error);\n    res.status(500).json({ message: \"Error interno del servidor\" });\n  }\n};\n\nexport async function registerRoutes(app: Express, needsHttpServer: boolean = false): Promise<Server | void> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Error al obtener usuario\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/summary/:date', isAuthenticated, async (req, res) => {\n    try {\n      const { date } = req.params;\n      const summary = await storage.getDailySummary(date);\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error getting daily summary:\", error);\n      res.status(500).json({ message: \"Error al obtener resumen diario\" });\n    }\n  });\n\n  app.get('/api/dashboard/low-stock', isAuthenticated, async (req, res) => {\n    try {\n      const lowStockProducts = await storage.getLowStockProducts();\n      res.json(lowStockProducts);\n    } catch (error) {\n      console.error(\"Error getting low stock products:\", error);\n      res.status(500).json({ message: \"Error al obtener productos con stock bajo\" });\n    }\n  });\n\n  app.get('/api/dashboard/top-debtors', isAuthenticated, async (req, res) => {\n    try {\n      const debtors = await storage.getCustomersWithDebt();\n      res.json(debtors.slice(0, 10)); // Top 10 debtors\n    } catch (error) {\n      console.error(\"Error getting top debtors:\", error);\n      res.status(500).json({ message: \"Error al obtener principales deudores\" });\n    }\n  });\n\n  app.get('/api/customers/with-debt', isAuthenticated, async (req, res) => {\n    try {\n      const debtors = await storage.getCustomersWithDebt();\n      res.json(debtors); // All customers with debt\n    } catch (error) {\n      console.error(\"Error getting customers with debt:\", error);\n      res.status(500).json({ message: \"Error al obtener clientes con deuda\" });\n    }\n  });\n\n  app.get('/api/dashboard/recent-sales/:date', isAuthenticated, async (req, res) => {\n    try {\n      const { date } = req.params;\n      const salesWithItems = await storage.getSalesWithItems(date, date);\n      res.json(salesWithItems);\n    } catch (error) {\n      console.error(\"Error getting recent sales:\", error);\n      res.status(500).json({ message: \"Error al obtener ventas recientes\" });\n    }\n  });\n\n  // Product routes\n  app.get('/api/products', isAuthenticated, async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Error al obtener productos\" });\n    }\n  });\n\n  app.get('/api/products/search', isAuthenticated, async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"ParÃ¡metro de bÃºsqueda requerido\" });\n      }\n      const products = await storage.searchProducts(q);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error searching products:\", error);\n      res.status(500).json({ message: \"Error al buscar productos\" });\n    }\n  });\n\n  app.get('/api/products/:id', isAuthenticated, async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Producto no encontrado\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Error al obtener producto\" });\n    }\n  });\n\n  app.post('/api/products', isAuthenticated, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(400).json({ message: \"Error al crear producto\" });\n    }\n  });\n\n  app.put('/api/products/:id', isAuthenticated, async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(400).json({ message: \"Error al actualizar producto\" });\n    }\n  });\n\n  app.delete('/api/products/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Error al eliminar producto\" });\n    }\n  });\n\n  // Customer routes\n  app.get('/api/customers', isAuthenticated, async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Error al obtener clientes\" });\n    }\n  });\n\n  app.get('/api/customers/search', isAuthenticated, async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"ParÃ¡metro de bÃºsqueda requerido\" });\n      }\n      const customers = await storage.searchCustomers(q);\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error searching customers:\", error);\n      res.status(500).json({ message: \"Error al buscar clientes\" });\n    }\n  });\n\n  app.get('/api/customers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const customer = await storage.getCustomer(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"Cliente no encontrado\" });\n      }\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error fetching customer:\", error);\n      res.status(500).json({ message: \"Error al obtener cliente\" });\n    }\n  });\n\n  app.post('/api/customers', isAuthenticated, async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      res.status(400).json({ message: \"Error al crear cliente\" });\n    }\n  });\n\n  app.put('/api/customers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.partial().parse(req.body);\n      const customer = await storage.updateCustomer(req.params.id, customerData);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(400).json({ message: \"Error al actualizar cliente\" });\n    }\n  });\n\n  app.delete('/api/customers/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCustomer(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting customer:\", error);\n      res.status(500).json({ message: \"Error al eliminar cliente\" });\n    }\n  });\n\n  // Sale routes\n  app.get('/api/sales', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate, customerId } = req.query;\n      let sales;\n      \n      if (customerId) {\n        sales = await storage.getSalesWithItemsByCustomer(customerId as string);\n      } else {\n        sales = await storage.getSalesWithItems(\n          startDate as string,\n          endDate as string\n        );\n      }\n      \n      res.json(sales);\n    } catch (error) {\n      console.error(\"Error fetching sales:\", error);\n      res.status(500).json({ message: \"Error al obtener ventas\" });\n    }\n  });\n\n  app.post('/api/sales', isAuthenticated, async (req, res) => {\n    try {\n      const { sale, items } = req.body;\n      const saleData = insertSaleSchema.parse(sale);\n      const itemsData = z.array(insertSaleItemSchema).parse(items);\n      \n      const newSale = await storage.createSale(saleData, itemsData);\n      res.status(201).json(newSale);\n    } catch (error) {\n      console.error(\"Error creating sale:\", error);\n      res.status(400).json({ message: \"Error al crear venta\" });\n    }\n  });\n\n  // Payment routes\n  app.get('/api/payments', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate, customerId } = req.query;\n      let payments;\n      \n      if (customerId) {\n        payments = await storage.getPaymentsByCustomer(customerId as string);\n      } else {\n        payments = await storage.getPayments(\n          startDate as string,\n          endDate as string\n        );\n      }\n      \n      res.json(payments);\n    } catch (error) {\n      console.error(\"Error fetching payments:\", error);\n      res.status(500).json({ message: \"Error al obtener pagos\" });\n    }\n  });\n\n  app.post('/api/payments', isAuthenticated, async (req, res) => {\n    try {\n      const paymentData = insertPaymentSchema.parse(req.body);\n      \n      // Validate payment amount is positive\n      const paymentAmount = Number(paymentData.amount);\n      if (!isFinite(paymentAmount) || paymentAmount <= 0) {\n        return res.status(400).json({ \n          message: \"El monto del pago debe ser un nÃºmero positivo vÃ¡lido\" \n        });\n      }\n      \n      // Validate overpayment prevention\n      if (paymentData.customerId) {\n        const customer = await storage.getCustomer(paymentData.customerId);\n        if (customer) {\n          const currentDebt = Number(customer.currentDebt || 0);\n          \n          if (paymentAmount > currentDebt) {\n            return res.status(400).json({ \n              message: `El pago de $${paymentAmount.toFixed(2)} excede la deuda actual de $${currentDebt.toFixed(2)}` \n            });\n          }\n        }\n      }\n      \n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      console.error(\"Error creating payment:\", error);\n      res.status(400).json({ message: \"Error al crear pago\" });\n    }\n  });\n\n  // Expense routes\n  app.get('/api/expenses', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const expenses = await storage.getExpenses(\n        startDate as string,\n        endDate as string\n      );\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ message: \"Error al obtener gastos\" });\n    }\n  });\n\n  app.post('/api/expenses', isAuthenticated, async (req, res) => {\n    try {\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense(expenseData);\n      res.status(201).json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n      res.status(400).json({ message: \"Error al crear gasto\" });\n    }\n  });\n\n  // Cash closing routes\n  app.get('/api/cash-closings', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const cashClosings = await storage.getCashClosings(\n        startDate as string,\n        endDate as string\n      );\n      res.json(cashClosings);\n    } catch (error) {\n      console.error(\"Error fetching cash closings:\", error);\n      res.status(500).json({ message: \"Error al obtener cierres de caja\" });\n    }\n  });\n\n  app.get('/api/cash-closings/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const cashClosing = await storage.getCashClosing(id);\n      if (!cashClosing) {\n        return res.status(404).json({ message: \"Cierre de caja no encontrado\" });\n      }\n      res.json(cashClosing);\n    } catch (error) {\n      console.error(\"Error fetching cash closing:\", error);\n      res.status(500).json({ message: \"Error al obtener cierre de caja\" });\n    }\n  });\n\n  app.get('/api/cash-closings/by-date/:date', isAuthenticated, async (req, res) => {\n    try {\n      const { date } = req.params;\n      const cashClosing = await storage.getCashClosingByDate(date);\n      res.json(cashClosing);\n    } catch (error) {\n      console.error(\"Error fetching cash closing by date:\", error);\n      res.status(500).json({ message: \"Error al obtener cierre de caja por fecha\" });\n    }\n  });\n\n  app.post('/api/cash-closings', isAuthenticated, async (req, res) => {\n    try {\n      // Security: Never trust client for closedBy - use authenticated user\n      const userId = (req as any).user?.claims?.sub;\n      if (!userId) {\n        return res.status(401).json({ message: \"Usuario no autenticado\" });\n      }\n\n      // Check if closing already exists for this date\n      const existingClosing = await storage.getCashClosingByDate(req.body.closingDate);\n      if (existingClosing) {\n        return res.status(409).json({ message: \"Ya existe un cierre para esta fecha\" });\n      }\n\n      // Remove closedBy from client data and set from server\n      const { closedBy, ...clientData } = req.body;\n      const cashClosingData = insertCashClosingSchema.parse({\n        ...clientData,\n        closedBy: userId\n      });\n      \n      const cashClosing = await storage.createCashClosing(cashClosingData);\n      res.status(201).json(cashClosing);\n    } catch (error) {\n      console.error(\"Error creating cash closing:\", error);\n      res.status(400).json({ message: \"Error al crear cierre de caja\" });\n    }\n  });\n\n  // Supplier routes\n  app.get('/api/suppliers', isAuthenticated, async (req, res) => {\n    try {\n      const suppliers = await storage.getSuppliers();\n      res.json(suppliers);\n    } catch (error) {\n      console.error(\"Error fetching suppliers:\", error);\n      res.status(500).json({ message: \"Error al obtener proveedores\" });\n    }\n  });\n\n  app.post('/api/suppliers', isAuthenticated, async (req, res) => {\n    try {\n      const supplierData = insertSupplierSchema.parse(req.body);\n      const supplier = await storage.createSupplier(supplierData);\n      res.status(201).json(supplier);\n    } catch (error) {\n      console.error(\"Error creating supplier:\", error);\n      res.status(400).json({ message: \"Error al crear proveedor\" });\n    }\n  });\n\n  app.put('/api/suppliers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const supplierData = insertSupplierSchema.partial().parse(req.body);\n      const supplier = await storage.updateSupplier(id, supplierData);\n      res.json(supplier);\n    } catch (error) {\n      console.error(\"Error updating supplier:\", error);\n      res.status(400).json({ message: \"Error al actualizar proveedor\" });\n    }\n  });\n\n  app.delete('/api/suppliers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSupplier(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting supplier:\", error);\n      res.status(400).json({ message: \"Error al eliminar proveedor\" });\n    }\n  });\n\n  app.get('/api/purchase-suggestions', isAuthenticated, async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      const suggestions = products\n        .filter(product => {\n          const currentStock = product.currentStock ?? 0;\n          const minStock = product.minStock ?? 0;\n          return currentStock <= minStock;\n        })\n        .map(product => {\n          const currentStock = product.currentStock ?? 0;\n          const minStock = product.minStock ?? 0;\n          const maxStock = product.maxStock ?? 0;\n          return {\n            ...product,\n            suggestedQuantity: maxStock > 0 ? maxStock - currentStock : minStock * 2,\n            priority: currentStock === 0 ? 'urgent' : 'normal' as const\n          };\n        });\n      res.json(suggestions);\n    } catch (error) {\n      console.error(\"Error generating purchase suggestions:\", error);\n      res.status(500).json({ message: \"Error al generar sugerencias de compra\" });\n    }\n  });\n\n  // Category routes\n  app.get('/api/categories', isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Error al obtener categorÃ­as\" });\n    }\n  });\n\n  app.post('/api/categories', isAuthenticated, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(400).json({ message: \"Error al crear categorÃ­a\" });\n    }\n  });\n\n  // API Key management routes\n  app.get('/api/api-keys', isAuthenticated, async (req, res) => {\n    try {\n      const apiKeys = await storage.getApiKeys();\n      // Don't return the actual hash for security\n      const safeApiKeys = apiKeys.map(key => ({\n        ...key,\n        keyHash: undefined,\n      }));\n      res.json(safeApiKeys);\n    } catch (error) {\n      console.error(\"Error fetching API keys:\", error);\n      res.status(500).json({ message: \"Error al obtener claves API\" });\n    }\n  });\n\n  app.post('/api/api-keys', isAuthenticated, async (req, res) => {\n    try {\n      const { keyName, permissions } = req.body;\n      \n      // Generate a random API key\n      const apiKey = crypto.randomBytes(32).toString('hex');\n      const keyHash = crypto.createHash('sha256').update(apiKey).digest('hex');\n      \n      const apiKeyData = insertApiKeySchema.parse({\n        keyName,\n        keyHash,\n        permissions,\n        isActive: true,\n      });\n      \n      const newApiKey = await storage.createApiKey(apiKeyData);\n      \n      // Return the plain key only once\n      res.status(201).json({\n        ...newApiKey,\n        keyHash: undefined,\n        plainKey: apiKey, // Only returned once\n      });\n    } catch (error) {\n      console.error(\"Error creating API key:\", error);\n      res.status(400).json({ message: \"Error al crear clave API\" });\n    }\n  });\n\n  app.delete('/api/api-keys/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteApiKey(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting API key:\", error);\n      res.status(500).json({ message: \"Error al eliminar clave API\" });\n    }\n  });\n\n  // ======================\n  // MOBILE ASSISTANT API ROUTES\n  // ======================\n\n  // Check API key status\n  app.get('/api/mobile/status', validateApiKey, (req, res) => {\n    res.json({ \n      status: 'active',\n      message: 'API funcionando correctamente',\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Get product stock by barcode or name\n  app.get('/api/mobile/products/stock', validateApiKey, async (req, res) => {\n    try {\n      const { barcode, name } = req.query;\n      \n      if (!barcode && !name) {\n        return res.status(400).json({ message: \"Se requiere cÃ³digo de barras o nombre del producto\" });\n      }\n      \n      let product;\n      if (barcode) {\n        product = await storage.getProductByBarcode(barcode as string);\n      } else if (name) {\n        const products = await storage.searchProducts(name as string);\n        product = products[0]; // Take first match\n      }\n      \n      if (!product) {\n        return res.status(404).json({ message: \"Producto no encontrado\" });\n      }\n      \n      res.json({\n        product: {\n          id: product.id,\n          name: product.name,\n          currentStock: product.currentStock,\n          salePrice: product.salePrice,\n          unit: product.unit,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error getting product stock:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Get customer debt\n  app.get('/api/mobile/customers/debt', validateApiKey, async (req, res) => {\n    try {\n      const { name } = req.query;\n      \n      if (!name) {\n        return res.status(400).json({ message: \"Se requiere nombre del cliente\" });\n      }\n      \n      const customers = await storage.searchCustomers(name as string);\n      const customer = customers[0]; // Take first match\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"Cliente no encontrado\" });\n      }\n      \n      res.json({\n        customer: {\n          id: customer.id,\n          name: customer.name,\n          currentDebt: customer.currentDebt,\n          creditLimit: customer.creditLimit,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error getting customer debt:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Get all debtors\n  app.get('/api/mobile/customers/debtors', validateApiKey, async (req, res) => {\n    try {\n      const debtors = await storage.getCustomersWithDebt();\n      res.json({\n        debtors: debtors.map(customer => ({\n          id: customer.id,\n          name: customer.name,\n          currentDebt: customer.currentDebt,\n        }))\n      });\n    } catch (error) {\n      console.error(\"Error getting debtors:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Register a new sale\n  app.post('/api/mobile/sales', validateApiKey, async (req, res) => {\n    try {\n      const { \n        customerName, \n        paymentMethod, \n        items, \n        saleDate \n      } = req.body;\n      \n      if (!paymentMethod || !items || !Array.isArray(items) || items.length === 0) {\n        return res.status(400).json({ message: \"Datos de venta incompletos\" });\n      }\n      \n      let customerId = null;\n      \n      // Find customer if payment method is fiado\n      if (paymentMethod === 'fiado') {\n        if (!customerName) {\n          return res.status(400).json({ message: \"Nombre del cliente requerido para ventas fiadas\" });\n        }\n        \n        const customers = await storage.searchCustomers(customerName);\n        const customer = customers[0];\n        \n        if (!customer) {\n          return res.status(404).json({ message: \"Cliente no encontrado\" });\n        }\n        \n        customerId = customer.id;\n      }\n      \n      // Validate products and calculate total\n      let totalAmount = 0;\n      const saleItems = [];\n      \n      for (const item of items) {\n        const product = await storage.getProduct(item.productId);\n        if (!product) {\n          return res.status(404).json({ message: `Producto ${item.productId} no encontrado` });\n        }\n        \n        if ((product.currentStock || 0) < item.quantity) {\n          return res.status(400).json({ \n            message: `Stock insuficiente para ${product.name}. Stock actual: ${product.currentStock}` \n          });\n        }\n        \n        const itemTotal = Number(product.salePrice) * Number(item.quantity);\n        totalAmount += itemTotal;\n        \n        saleItems.push({\n          productId: item.productId,\n          quantity: Number(item.quantity).toString(),\n          unitPrice: Number(product.salePrice).toString(),\n          totalPrice: itemTotal.toString(),\n        });\n      }\n      \n      // Create sale\n      const saleData = {\n        saleDate: saleDate || new Date().toISOString().split('T')[0],\n        customerId,\n        paymentMethod,\n        totalAmount: totalAmount.toString(),\n        isPaid: paymentMethod !== 'fiado',\n        entryMethod: 'api',\n        notes: 'Venta registrada desde asistente mÃ³vil',\n      };\n      \n      const sale = await storage.createSale(saleData, saleItems);\n      \n      res.status(201).json({\n        sale: {\n          id: sale.id,\n          totalAmount: sale.totalAmount,\n          paymentMethod: sale.paymentMethod,\n          customerName: customerName || null,\n        },\n        message: 'Venta registrada exitosamente'\n      });\n    } catch (error) {\n      console.error(\"Error creating mobile sale:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Register a payment\n  app.post('/api/mobile/payments', validateApiKey, async (req, res) => {\n    try {\n      const { customerName, amount, paymentMethod, paymentDate } = req.body;\n      \n      if (!customerName || !amount || !paymentMethod) {\n        return res.status(400).json({ message: \"Datos de pago incompletos\" });\n      }\n      \n      // Find customer\n      const customers = await storage.searchCustomers(customerName);\n      const customer = customers[0];\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"Cliente no encontrado\" });\n      }\n      \n      if (Number(amount) > Number(customer.currentDebt)) {\n        return res.status(400).json({ \n          message: `El monto supera la deuda actual de $${customer.currentDebt}` \n        });\n      }\n      \n      const paymentData = {\n        customerId: customer.id,\n        amount: amount.toString(),\n        paymentDate: paymentDate || new Date().toISOString().split('T')[0],\n        paymentMethod,\n        entryMethod: 'api',\n        notes: 'Pago registrado desde asistente mÃ³vil',\n      };\n      \n      const payment = await storage.createPayment(paymentData);\n      \n      res.status(201).json({\n        payment: {\n          id: payment.id,\n          amount: payment.amount,\n          customerName: customer.name,\n          remainingDebt: Number(customer.currentDebt) - Number(amount),\n        },\n        message: 'Pago registrado exitosamente'\n      });\n    } catch (error) {\n      console.error(\"Error creating mobile payment:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Update product stock\n  app.patch('/api/mobile/products/:id/stock', validateApiKey, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { stock, reason } = req.body;\n      \n      if (typeof stock !== 'number') {\n        return res.status(400).json({ message: \"Stock debe ser un nÃºmero\" });\n      }\n      \n      const product = await storage.getProduct(id);\n      if (!product) {\n        return res.status(404).json({ message: \"Producto no encontrado\" });\n      }\n      \n      const updatedProduct = await storage.updateProductStock(id, stock);\n      \n      // Create stock movement record\n      await storage.createStockMovement({\n        productId: id,\n        movementType: 'adjustment',\n        quantity: (stock - Number(product.currentStock || 0)).toString(),\n        reason: reason || 'Ajuste desde asistente mÃ³vil',\n      });\n      \n      res.json({\n        product: {\n          id: updatedProduct.id,\n          name: updatedProduct.name,\n          previousStock: product.currentStock,\n          newStock: updatedProduct.currentStock,\n        },\n        message: 'Stock actualizado exitosamente'\n      });\n    } catch (error) {\n      console.error(\"Error updating product stock:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Get simple sales report\n  app.get('/api/mobile/reports/sales', validateApiKey, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      const sales = await storage.getSales(\n        startDate as string,\n        endDate as string\n      );\n      \n      const totalSales = sales.reduce((sum, sale) => sum + Number(sale.totalAmount), 0);\n      const cashSales = sales.filter(s => s.paymentMethod === 'efectivo').reduce((sum, sale) => sum + Number(sale.totalAmount), 0);\n      const transferSales = sales.filter(s => s.paymentMethod === 'transferencia').reduce((sum, sale) => sum + Number(sale.totalAmount), 0);\n      const creditSales = sales.filter(s => s.paymentMethod === 'fiado').reduce((sum, sale) => sum + Number(sale.totalAmount), 0);\n      \n      res.json({\n        period: {\n          startDate: startDate || 'Sin lÃ­mite',\n          endDate: endDate || 'Sin lÃ­mite',\n        },\n        summary: {\n          totalSales,\n          salesCount: sales.length,\n          cashSales,\n          transferSales,\n          creditSales,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error getting sales report:\", error);\n      res.status(500).json({ message: \"Error interno del servidor\" });\n    }\n  });\n\n  // Only create HTTP server if needed (for development HMR)\n  if (needsHttpServer) {\n    const httpServer = createServer(app);\n    return httpServer;\n  }\n  \n  // In production, return void - Express app will be used directly\n  return;\n}\n","size_bytes":29980},"server/storage.ts":{"content":"import {\n  users,\n  suppliers,\n  categories,\n  products,\n  customers,\n  sales,\n  saleItems,\n  payments,\n  expenses,\n  stockMovements,\n  apiKeys,\n  cashClosings,\n  type User,\n  type UpsertUser,\n  type InsertSupplier,\n  type Supplier,\n  type InsertCategory,\n  type Category,\n  type InsertProduct,\n  type Product,\n  type InsertCustomer,\n  type Customer,\n  type InsertSale,\n  type Sale,\n  type InsertSaleItem,\n  type SaleItem,\n  type InsertPayment,\n  type Payment,\n  type InsertExpense,\n  type Expense,\n  type InsertStockMovement,\n  type StockMovement,\n  type InsertApiKey,\n  type ApiKey,\n  type CashClosing,\n  type InsertCashClosing,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, sql, and, gte, lte, like, ilike, ne } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Supplier operations\n  getSuppliers(): Promise<Supplier[]>;\n  getSupplier(id: string): Promise<Supplier | undefined>;\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  updateSupplier(\n    id: string,\n    supplier: Partial<InsertSupplier>,\n  ): Promise<Supplier>;\n  deleteSupplier(id: string): Promise<void>;\n\n  // Category operations\n  getCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(\n    id: string,\n    category: Partial<InsertCategory>,\n  ): Promise<Category>;\n  deleteCategory(id: string): Promise<void>;\n\n  // Product operations\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductByBarcode(barcode: string): Promise<Product | undefined>;\n  searchProducts(query: string): Promise<Product[]>;\n  getLowStockProducts(): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  updateProductStock(id: string, newStock: number): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n\n  // Customer operations\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  searchCustomers(query: string): Promise<Customer[]>;\n  getCustomersWithDebt(): Promise<Customer[]>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(\n    id: string,\n    customer: Partial<InsertCustomer>,\n  ): Promise<Customer>;\n  updateCustomerDebt(id: string, newDebt: number): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n\n  // Sale operations\n  getSales(startDate?: string, endDate?: string): Promise<Sale[]>;\n  getSalesWithItems(\n    startDate?: string,\n    endDate?: string,\n  ): Promise<(Sale & { saleItems: (SaleItem & { product: Product })[] })[]>;\n  getSale(id: string): Promise<Sale | undefined>;\n  getSalesByCustomer(customerId: string): Promise<Sale[]>;\n  getSalesWithItemsByCustomer(\n    customerId: string,\n  ): Promise<(Sale & { saleItems: (SaleItem & { product: Product })[] })[]>;\n  createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<Sale>;\n  updateSale(id: string, sale: Partial<InsertSale>): Promise<Sale>;\n  deleteSale(id: string): Promise<void>;\n\n  // Payment operations\n  getPayments(startDate?: string, endDate?: string): Promise<Payment[]>;\n  getPaymentsByCustomer(customerId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment>;\n  deletePayment(id: string): Promise<void>;\n\n  // Expense operations\n  getExpenses(startDate?: string, endDate?: string): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  updateExpense(id: string, expense: Partial<InsertExpense>): Promise<Expense>;\n  deleteExpense(id: string): Promise<void>;\n\n  // Stock movement operations\n  getStockMovements(\n    productId?: string,\n    startDate?: string,\n    endDate?: string,\n  ): Promise<StockMovement[]>;\n  createStockMovement(movement: InsertStockMovement): Promise<StockMovement>;\n\n  // API key operations\n  getApiKeys(): Promise<ApiKey[]>;\n  getApiKeyByHash(hash: string): Promise<ApiKey | undefined>;\n  createApiKey(apiKey: InsertApiKey): Promise<ApiKey>;\n  updateApiKey(id: string, apiKey: Partial<InsertApiKey>): Promise<ApiKey>;\n  deleteApiKey(id: string): Promise<void>;\n\n  // Cash closing operations\n  getCashClosings(startDate?: string, endDate?: string): Promise<CashClosing[]>;\n  getCashClosing(id: string): Promise<CashClosing | undefined>;\n  getCashClosingByDate(date: string): Promise<CashClosing | undefined>;\n  createCashClosing(cashClosing: InsertCashClosing): Promise<CashClosing>;\n\n  // Dashboard operations\n  getDailySummary(date: string): Promise<{\n    totalSales: number;\n    creditGiven: number;\n    debtCollected: number;\n    totalExpenses: number;\n    salesCount: number;\n    apiSalesCount: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Supplier operations\n  async getSuppliers(): Promise<Supplier[]> {\n    return await db.select().from(suppliers).orderBy(asc(suppliers.name));\n  }\n\n  async getSupplier(id: string): Promise<Supplier | undefined> {\n    const [supplier] = await db\n      .select()\n      .from(suppliers)\n      .where(eq(suppliers.id, id));\n    return supplier;\n  }\n\n  async createSupplier(supplier: InsertSupplier): Promise<Supplier> {\n    const [newSupplier] = await db\n      .insert(suppliers)\n      .values(supplier)\n      .returning();\n    return newSupplier;\n  }\n\n  async updateSupplier(\n    id: string,\n    supplier: Partial<InsertSupplier>,\n  ): Promise<Supplier> {\n    const [updatedSupplier] = await db\n      .update(suppliers)\n      .set({ ...supplier, updatedAt: new Date() })\n      .where(eq(suppliers.id, id))\n      .returning();\n    return updatedSupplier;\n  }\n\n  async deleteSupplier(id: string): Promise<void> {\n    await db.delete(suppliers).where(eq(suppliers.id, id));\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(asc(categories.name));\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    const [category] = await db\n      .select()\n      .from(categories)\n      .where(eq(categories.id, id));\n    return category;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(\n    id: string,\n    category: Partial<InsertCategory>,\n  ): Promise<Category> {\n    const [updatedCategory] = await db\n      .update(categories)\n      .set(category)\n      .where(eq(categories.id, id))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Product operations\n  async getProducts(): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(eq(products.isActive, true))\n      .orderBy(asc(products.name));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db\n      .select()\n      .from(products)\n      .where(eq(products.id, id));\n    return product;\n  }\n\n  async getProductByBarcode(barcode: string): Promise<Product | undefined> {\n    const [product] = await db\n      .select()\n      .from(products)\n      .where(eq(products.barcode, barcode));\n    return product;\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(eq(products.isActive, true), ilike(products.name, `%${query}%`)),\n      )\n      .orderBy(asc(products.name))\n      .limit(20);\n  }\n\n  async getLowStockProducts(): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.currentStock} <= ${products.minStock}`,\n        ),\n      )\n      .orderBy(asc(products.currentStock));\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(\n    id: string,\n    product: Partial<InsertProduct>,\n  ): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async updateProductStock(id: string, newStock: number): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ currentStock: newStock, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db\n      .update(products)\n      .set({ isActive: false })\n      .where(eq(products.id, id));\n  }\n\n  // Customer operations\n  async getCustomers(): Promise<Customer[]> {\n    return await db\n      .select()\n      .from(customers)\n      .where(eq(customers.isActive, true))\n      .orderBy(asc(customers.name));\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(eq(customers.id, id));\n    return customer;\n  }\n\n  async searchCustomers(query: string): Promise<Customer[]> {\n    return await db\n      .select()\n      .from(customers)\n      .where(\n        and(eq(customers.isActive, true), ilike(customers.name, `%${query}%`)),\n      )\n      .orderBy(asc(customers.name))\n      .limit(20);\n  }\n\n  async getCustomersWithDebt(): Promise<Customer[]> {\n    return await db\n      .select()\n      .from(customers)\n      .where(\n        and(eq(customers.isActive, true), sql`${customers.currentDebt} > 0`),\n      )\n      .orderBy(desc(customers.currentDebt));\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const [newCustomer] = await db\n      .insert(customers)\n      .values(customer)\n      .returning();\n    return newCustomer;\n  }\n\n  async updateCustomer(\n    id: string,\n    customer: Partial<InsertCustomer>,\n  ): Promise<Customer> {\n    const [updatedCustomer] = await db\n      .update(customers)\n      .set({ ...customer, updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return updatedCustomer;\n  }\n\n  async updateCustomerDebt(id: string, newDebt: number): Promise<Customer> {\n    const [updatedCustomer] = await db\n      .update(customers)\n      .set({ currentDebt: newDebt.toString(), updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return updatedCustomer;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    await db\n      .update(customers)\n      .set({ isActive: false })\n      .where(eq(customers.id, id));\n  }\n\n  // Sale operations\n  async getSales(startDate?: string, endDate?: string): Promise<Sale[]> {\n    if (startDate || endDate) {\n      const conditions = [];\n      if (startDate) conditions.push(gte(sales.saleDate, startDate));\n      if (endDate) conditions.push(lte(sales.saleDate, endDate));\n      \n      return await db\n        .select()\n        .from(sales)\n        .where(and(...conditions))\n        .orderBy(desc(sales.saleDate), desc(sales.createdAt));\n    }\n\n    return await db\n      .select()\n      .from(sales)\n      .orderBy(desc(sales.saleDate), desc(sales.createdAt));\n  }\n\n  async getSalesWithItems(\n    startDate?: string,\n    endDate?: string,\n  ): Promise<(Sale & { saleItems: (SaleItem & { product: Product })[] })[]> {\n    let salesData;\n\n    if (startDate || endDate) {\n      const conditions = [];\n      if (startDate) conditions.push(gte(sales.saleDate, startDate));\n      if (endDate) conditions.push(lte(sales.saleDate, endDate));\n      \n      salesData = await db\n        .select()\n        .from(sales)\n        .where(and(...conditions))\n        .orderBy(desc(sales.saleDate), desc(sales.createdAt));\n    } else {\n      salesData = await db\n        .select()\n        .from(sales)\n        .orderBy(desc(sales.saleDate), desc(sales.createdAt));\n    }\n\n    const salesWithItems = await Promise.all(\n      salesData.map(async (sale) => {\n        const items = await db\n          .select({\n            id: saleItems.id,\n            saleId: saleItems.saleId,\n            productId: saleItems.productId,\n            quantity: saleItems.quantity,\n            unitPrice: saleItems.unitPrice,\n            totalPrice: saleItems.totalPrice,\n            createdAt: saleItems.createdAt,\n            product: products,\n          })\n          .from(saleItems)\n          .innerJoin(products, eq(saleItems.productId, products.id))\n          .where(eq(saleItems.saleId, sale.id));\n\n        return { ...sale, saleItems: items };\n      }),\n    );\n\n    return salesWithItems;\n  }\n\n  async getSale(id: string): Promise<Sale | undefined> {\n    const [sale] = await db.select().from(sales).where(eq(sales.id, id));\n    return sale;\n  }\n\n  async getSalesByCustomer(customerId: string): Promise<Sale[]> {\n    return await db\n      .select()\n      .from(sales)\n      .where(eq(sales.customerId, customerId))\n      .orderBy(desc(sales.saleDate));\n  }\n\n  async getSalesWithItemsByCustomer(\n    customerId: string,\n  ): Promise<(Sale & { saleItems: (SaleItem & { product: Product })[] })[]> {\n    const salesData = await db\n      .select()\n      .from(sales)\n      .where(eq(sales.customerId, customerId))\n      .orderBy(desc(sales.saleDate));\n\n    const salesWithItems = await Promise.all(\n      salesData.map(async (sale) => {\n        const items = await db\n          .select({\n            id: saleItems.id,\n            saleId: saleItems.saleId,\n            productId: saleItems.productId,\n            quantity: saleItems.quantity,\n            unitPrice: saleItems.unitPrice,\n            totalPrice: saleItems.totalPrice,\n            createdAt: saleItems.createdAt,\n            product: products,\n          })\n          .from(saleItems)\n          .innerJoin(products, eq(saleItems.productId, products.id))\n          .where(eq(saleItems.saleId, sale.id));\n\n        return { ...sale, saleItems: items };\n      }),\n    );\n\n    return salesWithItems;\n  }\n\n  async createSale(sale: InsertSale, items: InsertSaleItem[]): Promise<Sale> {\n    return await db.transaction(async (tx) => {\n      const [newSale] = await tx.insert(sales).values(sale).returning();\n\n      // Insert sale items\n      const saleItemsWithSaleId = items.map((item) => ({\n        ...item,\n        saleId: newSale.id,\n      }));\n      await tx.insert(saleItems).values(saleItemsWithSaleId);\n\n      // Update stock for each product\n      for (const item of items) {\n        await tx\n          .update(products)\n          .set({\n            currentStock: sql`${products.currentStock} - ${Number(item.quantity)}`,\n            updatedAt: new Date(),\n          })\n          .where(eq(products.id, item.productId));\n\n        // Create stock movement\n        await tx.insert(stockMovements).values({\n          productId: item.productId,\n          movementType: \"sale\",\n          quantity: (-Number(item.quantity)).toString(),\n          reason: `Venta #${newSale.id}`,\n          referenceId: newSale.id,\n        });\n      }\n\n      // Update customer debt if payment method is fiado\n      if (sale.paymentMethod === \"fiado\" && sale.customerId) {\n        await tx\n          .update(customers)\n          .set({\n            currentDebt: sql`${customers.currentDebt} + ${Number(sale.totalAmount)}`,\n            updatedAt: new Date(),\n          })\n          .where(eq(customers.id, sale.customerId));\n      }\n\n      return newSale;\n    });\n  }\n\n  async updateSale(id: string, sale: Partial<InsertSale>): Promise<Sale> {\n    const [updatedSale] = await db\n      .update(sales)\n      .set({ ...sale, updatedAt: new Date() })\n      .where(eq(sales.id, id))\n      .returning();\n    return updatedSale;\n  }\n\n  async deleteSale(id: string): Promise<void> {\n    await db.delete(sales).where(eq(sales.id, id));\n  }\n\n  // Payment operations\n  async getPayments(startDate?: string, endDate?: string): Promise<Payment[]> {\n    if (startDate || endDate) {\n      const conditions = [];\n      if (startDate) conditions.push(gte(payments.paymentDate, startDate));\n      if (endDate) conditions.push(lte(payments.paymentDate, endDate));\n      \n      return await db\n        .select()\n        .from(payments)\n        .where(and(...conditions))\n        .orderBy(desc(payments.paymentDate), desc(payments.createdAt));\n    }\n\n    return await db\n      .select()\n      .from(payments)\n      .orderBy(desc(payments.paymentDate), desc(payments.createdAt));\n  }\n\n  async getPaymentsByCustomer(customerId: string): Promise<Payment[]> {\n    return await db\n      .select()\n      .from(payments)\n      .where(eq(payments.customerId, customerId))\n      .orderBy(desc(payments.paymentDate));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    return await db.transaction(async (tx) => {\n      const [newPayment] = await tx\n        .insert(payments)\n        .values(payment)\n        .returning();\n\n      // Update customer debt\n      await tx\n        .update(customers)\n        .set({\n          currentDebt: sql`${customers.currentDebt} - ${Number(payment.amount)}`,\n          updatedAt: new Date(),\n        })\n        .where(eq(customers.id, payment.customerId));\n\n      return newPayment;\n    });\n  }\n\n  async updatePayment(\n    id: string,\n    payment: Partial<InsertPayment>,\n  ): Promise<Payment> {\n    const [updatedPayment] = await db\n      .update(payments)\n      .set(payment)\n      .where(eq(payments.id, id))\n      .returning();\n    return updatedPayment;\n  }\n\n  async deletePayment(id: string): Promise<void> {\n    await db.delete(payments).where(eq(payments.id, id));\n  }\n\n  // Expense operations\n  async getExpenses(startDate?: string, endDate?: string): Promise<Expense[]> {\n    if (startDate || endDate) {\n      const conditions = [];\n      if (startDate) conditions.push(gte(expenses.expenseDate, startDate));\n      if (endDate) conditions.push(lte(expenses.expenseDate, endDate));\n      \n      return await db\n        .select()\n        .from(expenses)\n        .where(and(...conditions))\n        .orderBy(desc(expenses.expenseDate), desc(expenses.createdAt));\n    }\n\n    return await db\n      .select()\n      .from(expenses)\n      .orderBy(desc(expenses.expenseDate), desc(expenses.createdAt));\n  }\n\n  async createExpense(expense: InsertExpense): Promise<Expense> {\n    const [newExpense] = await db.insert(expenses).values(expense).returning();\n    return newExpense;\n  }\n\n  async updateExpense(\n    id: string,\n    expense: Partial<InsertExpense>,\n  ): Promise<Expense> {\n    const [updatedExpense] = await db\n      .update(expenses)\n      .set(expense)\n      .where(eq(expenses.id, id))\n      .returning();\n    return updatedExpense;\n  }\n\n  async deleteExpense(id: string): Promise<void> {\n    await db.delete(expenses).where(eq(expenses.id, id));\n  }\n\n  // Stock movement operations\n  async getStockMovements(\n    productId?: string,\n    startDate?: string,\n    endDate?: string,\n  ): Promise<StockMovement[]> {\n    const conditions = [];\n    if (productId) conditions.push(eq(stockMovements.productId, productId));\n    if (startDate)\n      conditions.push(gte(stockMovements.createdAt, new Date(startDate)));\n    if (endDate)\n      conditions.push(lte(stockMovements.createdAt, new Date(endDate)));\n\n    if (conditions.length > 0) {\n      return await db\n        .select()\n        .from(stockMovements)\n        .where(and(...conditions))\n        .orderBy(desc(stockMovements.createdAt));\n    }\n\n    return await db\n      .select()\n      .from(stockMovements)\n      .orderBy(desc(stockMovements.createdAt));\n  }\n\n  async createStockMovement(\n    movement: InsertStockMovement,\n  ): Promise<StockMovement> {\n    const [newMovement] = await db\n      .insert(stockMovements)\n      .values(movement)\n      .returning();\n    return newMovement;\n  }\n\n  // API key operations\n  async getApiKeys(): Promise<ApiKey[]> {\n    return await db.select().from(apiKeys).orderBy(desc(apiKeys.createdAt));\n  }\n\n  async getApiKeyByHash(hash: string): Promise<ApiKey | undefined> {\n    const [apiKey] = await db\n      .select()\n      .from(apiKeys)\n      .where(and(eq(apiKeys.keyHash, hash), eq(apiKeys.isActive, true)));\n    return apiKey;\n  }\n\n  async createApiKey(apiKey: InsertApiKey): Promise<ApiKey> {\n    const [newApiKey] = await db.insert(apiKeys).values(apiKey).returning();\n    return newApiKey;\n  }\n\n  async updateApiKey(\n    id: string,\n    apiKey: Partial<InsertApiKey>,\n  ): Promise<ApiKey> {\n    const [updatedApiKey] = await db\n      .update(apiKeys)\n      .set(apiKey)\n      .where(eq(apiKeys.id, id))\n      .returning();\n    return updatedApiKey;\n  }\n\n  async deleteApiKey(id: string): Promise<void> {\n    await db.delete(apiKeys).where(eq(apiKeys.id, id));\n  }\n\n  // Dashboard operations\n  async getDailySummary(date: string): Promise<{\n    totalSales: number;\n    creditGiven: number;\n    debtCollected: number;\n    totalExpenses: number;\n    salesCount: number;\n    apiSalesCount: number;\n  }> {\n    // Total sales for the day\n    const totalSalesResult = await db\n      .select({\n        total: sql<number>`COALESCE(SUM(${sales.totalAmount}), 0)`,\n        count: sql<number>`COUNT(*)`,\n      })\n      .from(sales)\n      .where(and(eq(sales.saleDate, date), ne(sales.paymentMethod, \"fiado\")));\n\n    // Credit given (fiado sales)\n    const creditGivenResult = await db\n      .select({\n        total: sql<number>`COALESCE(SUM(${sales.totalAmount}), 0)`,\n      })\n      .from(sales)\n      .where(and(eq(sales.saleDate, date), eq(sales.paymentMethod, \"fiado\")));\n\n    // Debt collected (payments)\n    const debtCollectedResult = await db\n      .select({\n        total: sql<number>`COALESCE(SUM(${payments.amount}), 0)`,\n      })\n      .from(payments)\n      .where(eq(payments.paymentDate, date));\n\n    // Total expenses\n    const totalExpensesResult = await db\n      .select({\n        total: sql<number>`COALESCE(SUM(${expenses.amount}), 0)`,\n      })\n      .from(expenses)\n      .where(eq(expenses.expenseDate, date));\n\n    // API sales count\n    const apiSalesResult = await db\n      .select({\n        count: sql<number>`COUNT(*)`,\n      })\n      .from(sales)\n      .where(and(eq(sales.saleDate, date), eq(sales.entryMethod, \"api\")));\n\n    return {\n      totalSales: Number(totalSalesResult[0]?.total || 0),\n      creditGiven: Number(creditGivenResult[0]?.total || 0),\n      debtCollected: Number(debtCollectedResult[0]?.total || 0),\n      totalExpenses: Number(totalExpensesResult[0]?.total || 0),\n      salesCount: Number(totalSalesResult[0]?.count || 0),\n      apiSalesCount: Number(apiSalesResult[0]?.count || 0),\n    };\n  }\n\n  // Cash closing operations\n  async getCashClosings(\n    startDate?: string,\n    endDate?: string,\n  ): Promise<CashClosing[]> {\n    if (startDate && endDate) {\n      return await db\n        .select()\n        .from(cashClosings)\n        .where(\n          and(\n            gte(cashClosings.closingDate, startDate),\n            lte(cashClosings.closingDate, endDate),\n          ),\n        )\n        .orderBy(desc(cashClosings.closingDate));\n    } else if (startDate) {\n      return await db\n        .select()\n        .from(cashClosings)\n        .where(gte(cashClosings.closingDate, startDate))\n        .orderBy(desc(cashClosings.closingDate));\n    } else if (endDate) {\n      return await db\n        .select()\n        .from(cashClosings)\n        .where(lte(cashClosings.closingDate, endDate))\n        .orderBy(desc(cashClosings.closingDate));\n    }\n\n    return await db\n      .select()\n      .from(cashClosings)\n      .orderBy(desc(cashClosings.closingDate));\n  }\n\n  async getCashClosing(id: string): Promise<CashClosing | undefined> {\n    const [cashClosing] = await db\n      .select()\n      .from(cashClosings)\n      .where(eq(cashClosings.id, id));\n    return cashClosing;\n  }\n\n  async getCashClosingByDate(date: string): Promise<CashClosing | undefined> {\n    const [cashClosing] = await db\n      .select()\n      .from(cashClosings)\n      .where(eq(cashClosings.closingDate, date));\n    return cashClosing;\n  }\n\n  async createCashClosing(\n    cashClosingData: InsertCashClosing,\n  ): Promise<CashClosing> {\n    const [newCashClosing] = await db\n      .insert(cashClosings)\n      .values(cashClosingData)\n      .returning();\n    return newCashClosing;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":25190},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Suppliers table\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  contactPerson: text(\"contact_person\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  address: text(\"address\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  barcode: varchar(\"barcode\"),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  costPrice: decimal(\"cost_price\", { precision: 10, scale: 2 }),\n  salePrice: decimal(\"sale_price\", { precision: 10, scale: 2 }).notNull(),\n  currentStock: integer(\"current_stock\").default(0),\n  minStock: integer(\"min_stock\").default(0),\n  maxStock: integer(\"max_stock\"),\n  unit: varchar(\"unit\").default(\"unidad\"), // unidad, kg, litro, etc.\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  address: text(\"address\"),\n  idDocument: varchar(\"id_document\"), // DNI, CUIT, etc.\n  creditLimit: decimal(\"credit_limit\", { precision: 10, scale: 2 }).default(\"0\"),\n  currentDebt: decimal(\"current_debt\", { precision: 10, scale: 2 }).default(\"0\"),\n  isActive: boolean(\"is_active\").default(true),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sales table\nexport const sales = pgTable(\"sales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  saleDate: date(\"sale_date\").notNull(),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  paymentMethod: varchar(\"payment_method\").notNull(), // efectivo, transferencia, fiado\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  isPaid: boolean(\"is_paid\").default(true),\n  notes: text(\"notes\"),\n  entryMethod: varchar(\"entry_method\").default(\"manual\"), // manual, api\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sale items table\nexport const saleItems = pgTable(\"sale_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  saleId: varchar(\"sale_id\").references(() => sales.id, { onDelete: \"cascade\" }).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 3 }).notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payments table (for customer debt payments)\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").references(() => customers.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentDate: date(\"payment_date\").notNull(),\n  paymentMethod: varchar(\"payment_method\").notNull(), // efectivo, transferencia\n  notes: text(\"notes\"),\n  entryMethod: varchar(\"entry_method\").default(\"manual\"), // manual, api\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Expenses table\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  expenseDate: date(\"expense_date\").notNull(),\n  category: varchar(\"category\"), // proveedores, servicios, sueldos, etc.\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  paymentMethod: varchar(\"payment_method\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Cash closing table for daily reconciliation\nexport const cashClosings = pgTable(\"cash_closings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  closingDate: date(\"closing_date\").notNull(),\n  closedBy: varchar(\"closed_by\").references(() => users.id).notNull(),\n  \n  // Expected amounts (system calculated)\n  expectedCash: decimal(\"expected_cash\", { precision: 10, scale: 2 }).notNull(),\n  expectedTransfers: decimal(\"expected_transfers\", { precision: 10, scale: 2 }).notNull(),\n  \n  // Actual amounts (physically counted)\n  actualCash: decimal(\"actual_cash\", { precision: 10, scale: 2 }).notNull(),\n  actualTransfers: decimal(\"actual_transfers\", { precision: 10, scale: 2 }).notNull(),\n  \n  // Variances (calculated: actual - expected)\n  cashVariance: decimal(\"cash_variance\", { precision: 10, scale: 2 }).notNull(),\n  transferVariance: decimal(\"transfer_variance\", { precision: 10, scale: 2 }).notNull(),\n  \n  // Summary totals\n  totalSales: decimal(\"total_sales\", { precision: 10, scale: 2 }).notNull(),\n  totalExpenses: decimal(\"total_expenses\", { precision: 10, scale: 2 }).notNull(),\n  debtCollected: decimal(\"debt_collected\", { precision: 10, scale: 2 }).notNull(),\n  creditGiven: decimal(\"credit_given\", { precision: 10, scale: 2 }).notNull(),\n  \n  // Reconciliation notes\n  notes: text(\"notes\"),\n  reconciliationStatus: varchar(\"reconciliation_status\").default(\"completed\"), // completed, discrepancy\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Stock movements table\nexport const stockMovements = pgTable(\"stock_movements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  movementType: varchar(\"movement_type\").notNull(), // sale, purchase, adjustment\n  quantity: decimal(\"quantity\", { precision: 10, scale: 3 }).notNull(), // positive for in, negative for out\n  reason: text(\"reason\"),\n  referenceId: varchar(\"reference_id\"), // sale_id, purchase_id, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// API keys table for mobile assistant security\nexport const apiKeys = pgTable(\"api_keys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  keyName: text(\"key_name\").notNull(),\n  keyHash: text(\"key_hash\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  permissions: text(\"permissions\").array(), // read_stock, create_sale, etc.\n  lastUsed: timestamp(\"last_used\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const suppliersRelations = relations(suppliers, ({ many }) => ({\n  products: many(products),\n  expenses: many(expenses),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  supplier: one(suppliers, {\n    fields: [products.supplierId],\n    references: [suppliers.id],\n  }),\n  saleItems: many(saleItems),\n  stockMovements: many(stockMovements),\n}));\n\nexport const customersRelations = relations(customers, ({ many }) => ({\n  sales: many(sales),\n  payments: many(payments),\n}));\n\nexport const salesRelations = relations(sales, ({ one, many }) => ({\n  customer: one(customers, {\n    fields: [sales.customerId],\n    references: [customers.id],\n  }),\n  saleItems: many(saleItems),\n}));\n\nexport const saleItemsRelations = relations(saleItems, ({ one }) => ({\n  sale: one(sales, {\n    fields: [saleItems.saleId],\n    references: [sales.id],\n  }),\n  product: one(products, {\n    fields: [saleItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  customer: one(customers, {\n    fields: [payments.customerId],\n    references: [customers.id],\n  }),\n}));\n\nexport const cashClosingsRelations = relations(cashClosings, ({ one }) => ({\n  closedByUser: one(users, {\n    fields: [cashClosings.closedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const expensesRelations = relations(expenses, ({ one }) => ({\n  supplier: one(suppliers, {\n    fields: [expenses.supplierId],\n    references: [suppliers.id],\n  }),\n}));\n\nexport const stockMovementsRelations = relations(stockMovements, ({ one }) => ({\n  product: one(products, {\n    fields: [stockMovements.productId],\n    references: [products.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products)\n  .omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n  })\n  .extend({\n    // Allow strings for all numeric fields and convert them\n    costPrice: z.string().optional().transform(val => val ? val : undefined),\n    salePrice: z.string().min(1, \"El precio de venta es requerido\"),\n    currentStock: z.string().min(1, \"El stock actual es requerido\").transform(val => parseInt(val)),\n    minStock: z.string().min(1, \"El stock mÃ­nimo es requerido\").transform(val => parseInt(val)),\n    maxStock: z.string().optional().transform(val => val ? parseInt(val) : undefined),\n  });\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSaleItemSchema = createInsertSchema(saleItems).omit({\n  id: true,\n  createdAt: true,\n  saleId: true, // saleId is automatically added by the storage layer\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStockMovementSchema = createInsertSchema(stockMovements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCashClosingSchema = createInsertSchema(cashClosings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertApiKeySchema = createInsertSchema(apiKeys).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\nexport type Supplier = typeof suppliers.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\n\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\nexport type Sale = typeof sales.$inferSelect;\n\nexport type InsertSaleItem = z.infer<typeof insertSaleItemSchema>;\nexport type SaleItem = typeof saleItems.$inferSelect;\n\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\n\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Expense = typeof expenses.$inferSelect;\n\nexport type InsertStockMovement = z.infer<typeof insertStockMovementSchema>;\nexport type StockMovement = typeof stockMovements.$inferSelect;\n\nexport type InsertCashClosing = z.infer<typeof insertCashClosingSchema>;\nexport type CashClosing = typeof cashClosings.$inferSelect;\n\nexport type InsertApiKey = z.infer<typeof insertApiKeySchema>;\nexport type ApiKey = typeof apiKeys.$inferSelect;\n\n// Purchase suggestion type\nexport type PurchaseSuggestion = Product & {\n  suggestedQuantity: number;\n  priority: 'urgent' | 'normal';\n};\n","size_bytes":13548},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport DailyEntry from \"@/pages/daily-entry\";\nimport Products from \"@/pages/products\";\nimport Customers from \"@/pages/customers\";\nimport Suppliers from \"@/pages/suppliers\";\nimport Finances from \"@/pages/finances\";\nimport ApiStatus from \"@/pages/api-status\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/carga-diaria\" component={DailyEntry} />\n          <Route path=\"/productos\" component={Products} />\n          <Route path=\"/clientes\" component={Customers} />\n          <Route path=\"/proveedores\" component={Suppliers} />\n          <Route path=\"/finanzas\" component={Finances} />\n          <Route path=\"/api-asistente\" component={ApiStatus} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1609},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 96%);\n  --foreground: hsl(215, 25%, 27%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(215, 25%, 27%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(215, 25%, 27%);\n  --primary: hsl(210, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 20%, 40%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 92%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 90%);\n  --accent-foreground: hsl(215, 25%, 27%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(210, 83%, 53%);\n  --chart-1: hsl(210, 83%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(45, 93%, 47%);\n  --chart-4: hsl(27, 87%, 67%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(215, 25%, 27%);\n  --sidebar-primary: hsl(210, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 90%);\n  --sidebar-accent-foreground: hsl(215, 25%, 27%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(210, 83%, 53%);\n  --font-sans: 'Roboto', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 2px 4px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 4px 6px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00), 0px 8px 10px -1px hsl(210, 83%, 53%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 83%, 53%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(210, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205, 70%, 7.8431%);\n  --accent-foreground: hsl(203, 87%, 52%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207, 27%, 18%);\n  --ring: hsl(210, 83%, 53%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(210, 83%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203, 87%, 52%);\n  --sidebar-border: hsl(205, 15%, 26%);\n  --sidebar-ring: hsl(210, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .material-icons {\n    font-family: 'Material Icons';\n    font-weight: normal;\n    font-style: normal;\n    font-size: 24px;\n    line-height: 1;\n    letter-spacing: normal;\n    text-transform: none;\n    display: inline-block;\n    white-space: nowrap;\n    word-wrap: normal;\n    direction: ltr;\n    -webkit-font-feature-settings: 'liga';\n    -webkit-font-smoothing: antialiased;\n  }\n}\n","size_bytes":3906},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/api-status.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  Waypoints, \n  Plus, \n  Key, \n  Smartphone, \n  CheckCircle, \n  AlertCircle,\n  Copy,\n  Trash2\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function ApiStatus() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [keyName, setKeyName] = useState(\"\");\n  const [permissions, setPermissions] = useState<string[]>([]);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"No autorizado\",\n        description: \"Debes iniciar sesiÃ³n para acceder al sistema.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Get API keys\n  const { data: apiKeys, isLoading: isLoadingKeys } = useQuery({\n    queryKey: ['/api/api-keys'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Create API key mutation\n  const createKeyMutation = useMutation({\n    mutationFn: async (data: { keyName: string; permissions: string[] }) => {\n      return await apiRequest(\"POST\", \"/api/api-keys\", data);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Clave API creada\",\n        description: \"La clave API se creÃ³ exitosamente. CÃ³piala ahora, no se mostrarÃ¡ nuevamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/api-keys'] });\n      setIsDialogOpen(false);\n      setKeyName(\"\");\n      setPermissions([]);\n      \n      // Show the generated key\n      if ((data as any).plainKey) {\n        navigator.clipboard.writeText((data as any).plainKey);\n        toast({\n          title: \"Clave copiada\",\n          description: \"La clave API se copiÃ³ al portapapeles.\",\n        });\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Tu sesiÃ³n ha expirado. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la clave API.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete API key mutation\n  const deleteKeyMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/api-keys/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Clave eliminada\",\n        description: \"La clave API se eliminÃ³ exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/api-keys'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Tu sesiÃ³n ha expirado. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar la clave API.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!keyName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"El nombre de la clave es requerido.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createKeyMutation.mutate({ keyName, permissions });\n  };\n\n  const handlePermissionChange = (permission: string, checked: boolean) => {\n    if (checked) {\n      setPermissions([...permissions, permission]);\n    } else {\n      setPermissions(permissions.filter(p => p !== permission));\n    }\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"border-b bg-card p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">API y Asistente MÃ³vil</h2>\n              <p className=\"text-muted-foreground\">Gestiona las claves de acceso para el asistente mÃ³vil</p>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"flex items-center space-x-2\" data-testid=\"button-new-api-key\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Nueva Clave API</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Crear Nueva Clave API</DialogTitle>\n                  <DialogDescription>\n                    Crea una nueva clave API para el asistente mÃ³vil. Define los permisos especÃ­ficos que tendrÃ¡ esta clave.\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"key-name\">Nombre de la Clave</Label>\n                    <Input\n                      id=\"key-name\"\n                      value={keyName}\n                      onChange={(e) => setKeyName(e.target.value)}\n                      placeholder=\"Ej: Asistente MÃ³vil Principal\"\n                      data-testid=\"input-key-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label>Permisos</Label>\n                    <div className=\"space-y-2 mt-2\">\n                      {[\n                        { id: 'read_stock', label: 'Consultar Stock' },\n                        { id: 'read_customers', label: 'Consultar Clientes y Deudas' },\n                        { id: 'create_sale', label: 'Registrar Ventas' },\n                        { id: 'create_payment', label: 'Registrar Pagos' },\n                        { id: 'update_stock', label: 'Actualizar Stock' },\n                        { id: 'read_reports', label: 'Ver Reportes Simples' },\n                      ].map((permission) => (\n                        <label key={permission.id} className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={permissions.includes(permission.id)}\n                            onChange={(e) => handlePermissionChange(permission.id, e.target.checked)}\n                            className=\"rounded\"\n                          />\n                          <span className=\"text-sm\">{permission.label}</span>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-3\">\n                    <Button \n                      type=\"submit\" \n                      className=\"flex-1\"\n                      disabled={createKeyMutation.isPending}\n                      data-testid=\"button-create-key\"\n                    >\n                      {createKeyMutation.isPending ? \"Creando...\" : \"Crear Clave\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      onClick={() => setIsDialogOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancelar\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Estado de la API */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Waypoints className=\"h-5 w-5 text-primary\" />\n                <span>Estado de la API</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                    <span className=\"font-medium text-green-800\">API Activa</span>\n                  </div>\n                  <p className=\"text-sm text-green-600\">Funcionando correctamente</p>\n                </div>\n                \n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Smartphone className=\"h-5 w-5 text-blue-600\" />\n                    <span className=\"font-medium text-blue-800\">Endpoint Base</span>\n                  </div>\n                  <p className=\"text-sm text-blue-600 font-mono\">/api/mobile/</p>\n                </div>\n                \n                <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Key className=\"h-5 w-5 text-purple-600\" />\n                    <span className=\"font-medium text-purple-800\">Claves Activas</span>\n                  </div>\n                  <p className=\"text-lg font-bold text-purple-800\">\n                    {(apiKeys as any[])?.filter((key: any) => key.isActive).length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Claves API */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Key className=\"h-5 w-5\" />\n                <span>Claves API</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoadingKeys ? (\n                <div className=\"space-y-3\">\n                  {[...Array(2)].map((_, i) => (\n                    <div key={i} className=\"p-4 border border-border rounded-lg animate-pulse\">\n                      <div className=\"h-4 bg-muted rounded w-1/4 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : apiKeys && (apiKeys as any[]).length > 0 ? (\n                <div className=\"space-y-3\">\n                  {(apiKeys as any[]).map((key: any) => (\n                    <div key={key.id} className=\"p-4 border border-border rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3\">\n                            <h4 className=\"font-medium\">{key.keyName}</h4>\n                            <Badge variant={key.isActive ? \"default\" : \"secondary\"}>\n                              {key.isActive ? \"Activa\" : \"Inactiva\"}\n                            </Badge>\n                          </div>\n                          <div className=\"mt-2\">\n                            <p className=\"text-sm text-muted-foreground\">\n                              Creada: {new Date(key.createdAt).toLocaleDateString('es-AR')}\n                            </p>\n                            {key.lastUsed && (\n                              <p className=\"text-sm text-muted-foreground\">\n                                Ãltimo uso: {new Date(key.lastUsed).toLocaleDateString('es-AR')}\n                              </p>\n                            )}\n                            <div className=\"flex flex-wrap gap-1 mt-2\">\n                              {key.permissions?.map((permission: string) => (\n                                <Badge key={permission} variant=\"outline\" className=\"text-xs\">\n                                  {permission.replace('_', ' ')}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => deleteKeyMutation.mutate(key.id)}\n                            disabled={deleteKeyMutation.isPending}\n                            data-testid={`button-delete-${key.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Key className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No hay claves API configuradas.</p>\n                  <p className=\"text-sm\">Crea una clave para comenzar a usar el asistente mÃ³vil.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* DocumentaciÃ³n de Endpoints */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Waypoints className=\"h-5 w-5\" />\n                <span>Endpoints Disponibles</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-3 border border-border rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Badge variant=\"outline\">GET</Badge>\n                    <code className=\"text-sm\">/api/mobile/products/stock</code>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Consultar stock de producto por cÃ³digo de barras o nombre\n                  </p>\n                </div>\n\n                <div className=\"p-3 border border-border rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Badge variant=\"outline\">GET</Badge>\n                    <code className=\"text-sm\">/api/mobile/customers/debt</code>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Consultar deuda de un cliente especÃ­fico\n                  </p>\n                </div>\n\n                <div className=\"p-3 border border-border rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Badge variant=\"outline\">POST</Badge>\n                    <code className=\"text-sm\">/api/mobile/sales</code>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Registrar una nueva venta (efectivo, transferencia o fiado)\n                  </p>\n                </div>\n\n                <div className=\"p-3 border border-border rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Badge variant=\"outline\">POST</Badge>\n                    <code className=\"text-sm\">/api/mobile/payments</code>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Registrar un pago de cuenta corriente\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":16935},"client/src/pages/customers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Users, Plus, Search, CreditCard, DollarSign, Phone, Edit, Trash2, MessageCircle, ShoppingCart } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst customerSchema = z.object({\n  name: z.string().min(1, \"El nombre es requerido\"),\n  email: z.string().email(\"Email invÃ¡lido\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  idDocument: z.string().optional(),\n  creditLimit: z.string().optional().transform(val => val && val.trim() !== \"\" ? val : \"0\"),\n});\n\nconst paymentSchema = z.object({\n  amount: z.string().min(1, \"El monto es requerido\").refine(val => !isNaN(parseFloat(val)) && parseFloat(val) > 0, \"El monto debe ser un nÃºmero vÃ¡lido mayor a cero\"),\n  paymentMethod: z.string().min(1, \"El mÃ©todo de pago es requerido\"),\n  notes: z.string().optional(),\n});\n\ntype CustomerFormData = z.infer<typeof customerSchema>;\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\n// Account Transaction History Component\nfunction AccountTransactionHistory({ sales, payments }: { sales: any[], payments: any[] }) {\n  // Combine and sort transactions by date\n  const transactions = [\n    ...sales.map((sale: any) => ({\n      id: sale.id,\n      type: 'sale' as const,\n      date: sale.saleDate,\n      description: `Venta ${sale.paymentMethod}`,\n      amount: Number(sale.totalAmount),\n      balance: 0, // Will be calculated below\n    })),\n    ...payments.map((payment: any) => ({\n      id: payment.id,\n      type: 'payment' as const,\n      date: payment.paymentDate,\n      description: `Pago ${payment.paymentMethod}`,\n      amount: -Number(payment.amount), // Negative because it reduces debt\n      balance: 0, // Will be calculated below\n    }))\n  ].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n  // Calculate running balance\n  let runningBalance = 0;\n  transactions.forEach(transaction => {\n    runningBalance += transaction.amount;\n    transaction.balance = runningBalance;\n  });\n\n  if (transactions.length === 0) {\n    return (\n      <div className=\"text-center py-4 text-muted-foreground\">\n        <CreditCard className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n        <p>No hay movimientos registrados</p>\n        <p className=\"text-sm\">Las transacciones aparecerÃ¡n aquÃ­</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n      {transactions.map((transaction, index) => (\n        <div \n          key={transaction.id} \n          className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50\"\n          data-testid={`transaction-${transaction.id}`}\n        >\n          <div className=\"flex items-center space-x-3\">\n            <div className={`p-2 rounded-full ${\n              transaction.type === 'sale' \n                ? 'bg-orange-100 text-orange-600' \n                : 'bg-green-100 text-green-600'\n            }`}>\n              {transaction.type === 'sale' ? \n                <ShoppingCart className=\"h-4 w-4\" /> : \n                <DollarSign className=\"h-4 w-4\" />\n              }\n            </div>\n            <div>\n              <p className=\"font-medium text-sm\">{transaction.description}</p>\n              <p className=\"text-xs text-muted-foreground\">\n                {format(new Date(transaction.date), \"d 'de' MMMM, yyyy\", { locale: es })}\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className={`font-medium ${\n              transaction.type === 'sale' ? 'text-orange-600' : 'text-green-600'\n            }`}>\n              {transaction.type === 'sale' ? '+' : ''}${Math.abs(transaction.amount).toFixed(2)}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              Saldo: ${transaction.balance.toFixed(2)}\n            </p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default function Customers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showDebtorsOnly, setShowDebtorsOnly] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<any>(null);\n  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);\n  const [paymentCustomer, setPaymentCustomer] = useState<any>(null);\n  const [isAccountDialogOpen, setIsAccountDialogOpen] = useState(false);\n  const [accountCustomer, setAccountCustomer] = useState<any>(null);\n\n  // Load customers\n  const { data: customers, isLoading: customersLoading, error: customersError } = useQuery({\n    queryKey: ['/api/customers'],\n    enabled: isAuthenticated,\n  });\n\n  // Load customers with debt for summary\n  const { data: customersWithDebt } = useQuery({\n    queryKey: ['/api/customers/with-debt'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n  \n  // Load top debtors for display\n  const { data: topDebtors } = useQuery({\n    queryKey: ['/api/dashboard/top-debtors'],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Load customer transaction history for account statement\n  const { data: customerSales = [], isLoading: salesLoading } = useQuery({\n    queryKey: ['/api/sales', 'customer', accountCustomer?.id],\n    queryFn: async () => {\n      if (!accountCustomer) return [];\n      const response = await apiRequest(\"GET\", `/api/sales?customerId=${accountCustomer.id}`);\n      return response.json();\n    },\n    enabled: !!accountCustomer?.id && isAccountDialogOpen,\n    retry: false,\n  });\n\n  const { data: customerPayments = [], isLoading: paymentsLoading } = useQuery({\n    queryKey: ['/api/payments', accountCustomer?.id],\n    queryFn: async () => {\n      if (!accountCustomer) return [];\n      const response = await apiRequest(\"GET\", `/api/payments?customerId=${accountCustomer.id}`);\n      return response.json();\n    },\n    enabled: !!accountCustomer?.id && isAccountDialogOpen,\n    retry: false,\n  });\n\n  const filteredCustomers = Array.isArray(customers) ? customers.filter((customer: any) => {\n    // Basic search filter\n    const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (customer.phone && customer.phone.includes(searchTerm)) ||\n      (customer.idDocument && customer.idDocument.includes(searchTerm));\n    \n    // Debtors only filter\n    const matchesDebtorFilter = !showDebtorsOnly || \n      (Array.isArray(customersWithDebt) && customersWithDebt.some((debtor: any) => debtor.id === customer.id));\n    \n    return matchesSearch && matchesDebtorFilter;\n  }) : [];\n\n  const totalCustomers = Array.isArray(customers) ? customers.length : 0;\n  const customersWithDebtCount = Array.isArray(customersWithDebt) ? customersWithDebt.length : 0;\n  const totalDebt = Array.isArray(customersWithDebt) ? customersWithDebt.reduce((sum: number, customer: any) => sum + Number(customer.currentDebt || 0), 0) : 0;\n\n  // Form handling\n  const form = useForm<CustomerFormData>({\n    resolver: zodResolver(customerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      idDocument: \"\",\n      creditLimit: \"\",\n    },\n  });\n\n  const paymentForm = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      amount: \"\",\n      paymentMethod: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Reset form when editing customer changes\n  useEffect(() => {\n    if (editingCustomer) {\n      form.reset({\n        name: editingCustomer.name || \"\",\n        email: editingCustomer.email || \"\",\n        phone: editingCustomer.phone || \"\",\n        address: editingCustomer.address || \"\",\n        idDocument: editingCustomer.idDocument || \"\",\n        creditLimit: editingCustomer.creditLimit || \"\",\n      });\n    } else {\n      form.reset({\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n        address: \"\",\n        idDocument: \"\",\n        creditLimit: \"\",\n      });\n    }\n  }, [editingCustomer, form]);\n\n  // Create customer mutation\n  const createCustomerMutation = useMutation({\n    mutationFn: async (customerData: CustomerFormData) => {\n      return await apiRequest(\"POST\", \"/api/customers\", customerData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cliente creado\",\n        description: \"El cliente se creÃ³ exitosamente.\",\n      });\n      setIsDialogOpen(false);\n      setEditingCustomer(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers/with-debt'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/top-debtors'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Tu sesiÃ³n ha expirado. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear el cliente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update customer mutation\n  const updateCustomerMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: CustomerFormData }) => {\n      return await apiRequest(\"PUT\", `/api/customers/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cliente actualizado\",\n        description: \"El cliente se actualizÃ³ exitosamente.\",\n      });\n      setIsDialogOpen(false);\n      setEditingCustomer(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers/with-debt'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/top-debtors'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Tu sesiÃ³n ha expirado. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el cliente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete customer mutation\n  const deleteCustomerMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/customers/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cliente eliminado\",\n        description: \"El cliente se eliminÃ³ exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers/with-debt'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/top-debtors'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Tu sesiÃ³n ha expirado. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el cliente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create payment mutation\n  const createPaymentMutation = useMutation({\n    mutationFn: async (paymentData: PaymentFormData) => {\n      const data = {\n        ...paymentData,\n        customerId: paymentCustomer.id,\n        paymentDate: new Date().toISOString().split('T')[0],\n      };\n      return await apiRequest(\"POST\", \"/api/payments\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Pago registrado\",\n        description: \"El pago se registrÃ³ exitosamente.\",\n      });\n      setIsPaymentDialogOpen(false);\n      setPaymentCustomer(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers/with-debt'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/top-debtors'] });\n      paymentForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Tu sesiÃ³n ha expirado. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo registrar el pago.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CustomerFormData) => {\n    if (editingCustomer) {\n      updateCustomerMutation.mutate({ id: editingCustomer.id, data });\n    } else {\n      createCustomerMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (customer: any) => {\n    setEditingCustomer(customer);\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (customerId: string) => {\n    if (confirm('Â¿EstÃ¡s seguro de que deseas eliminar este cliente?')) {\n      deleteCustomerMutation.mutate(customerId);\n    }\n  };\n\n  const handlePayment = (customer: any) => {\n    setPaymentCustomer(customer);\n    setIsPaymentDialogOpen(true);\n  };\n\n  const handlePaymentSubmit = (data: PaymentFormData) => {\n    // Validate payment amount doesn't exceed current debt\n    const currentDebt = Number(paymentCustomer?.currentDebt || 0);\n    const paymentAmount = parseFloat(data.amount);\n    \n    if (isNaN(paymentAmount)) {\n      toast({\n        title: \"Error de validaciÃ³n\",\n        description: \"El monto debe ser un nÃºmero vÃ¡lido\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (paymentAmount > currentDebt) {\n      toast({\n        title: \"Error de validaciÃ³n\",\n        description: `El pago no puede exceder la deuda actual de $${currentDebt.toFixed(2)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (paymentAmount <= 0) {\n      toast({\n        title: \"Error de validaciÃ³n\",\n        description: \"El monto del pago debe ser mayor a cero\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createPaymentMutation.mutate(data);\n  };\n\n  const handleViewAccount = (customer: any) => {\n    setAccountCustomer(customer);\n    setIsAccountDialogOpen(true);\n  };\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"No autorizado\",\n        description: \"Debes iniciar sesiÃ³n para acceder al sistema.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"border-b bg-card p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">GestiÃ³n de Clientes</h2>\n              <p className=\"text-muted-foreground\">Administra cuentas corrientes y fiados</p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"outline\" className=\"flex items-center space-x-2\" data-testid=\"button-export-accounts\">\n                <CreditCard className=\"h-4 w-4\" />\n                <span>Exportar Cuentas</span>\n              </Button>\n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"flex items-center space-x-2\" data-testid=\"button-new-customer\" onClick={() => { setEditingCustomer(null); setIsDialogOpen(true); }}>\n                    <Plus className=\"h-4 w-4\" />\n                    <span>Nuevo Cliente</span>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[425px]\">\n                  <DialogHeader>\n                    <DialogTitle>{editingCustomer ? 'Editar Cliente' : 'Nuevo Cliente'}</DialogTitle>\n                    <DialogDescription>\n                      {editingCustomer ? 'Modifica los datos del cliente.' : 'Completa la informaciÃ³n del nuevo cliente.'}\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nombre</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Nombre del cliente\" {...field} data-testid=\"input-customer-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" placeholder=\"email@ejemplo.com\" {...field} data-testid=\"input-customer-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>TelÃ©fono</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"NÃºmero de telÃ©fono\" {...field} data-testid=\"input-customer-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"address\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>DirecciÃ³n</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"DirecciÃ³n del cliente\" {...field} data-testid=\"input-customer-address\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"idDocument\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>DNI/CUIT</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"NÃºmero de documento\" {...field} data-testid=\"input-customer-document\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"creditLimit\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>LÃ­mite de CrÃ©dito</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"input-customer-credit-limit\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsDialogOpen(false)}\n                          data-testid=\"button-cancel-customer\"\n                        >\n                          Cancelar\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createCustomerMutation.isPending || updateCustomerMutation.isPending}\n                          data-testid=\"button-save-customer\"\n                        >\n                          {(createCustomerMutation.isPending || updateCustomerMutation.isPending) ? \"Guardando...\" : (editingCustomer ? \"Actualizar\" : \"Crear Cliente\")}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Resumen de Deudas */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Deudas</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-debt\">${totalDebt.toFixed(2)}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"h-6 w-6 text-red-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Clientes con Deuda</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-debtors-count\">{customersWithDebtCount}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Clientes</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-customers\">{totalCustomers}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* BÃºsqueda */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-muted-foreground\" />\n                  <Input \n                    placeholder=\"Buscar clientes por nombre, telÃ©fono o documento...\" \n                    className=\"pl-10\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    data-testid=\"input-search-customers\"\n                  />\n                </div>\n                <Button \n                  variant={showDebtorsOnly ? \"default\" : \"outline\"} \n                  onClick={() => setShowDebtorsOnly(!showDebtorsOnly)}\n                  data-testid=\"button-filter-debtors\"\n                >\n                  Solo Deudores {showDebtorsOnly && (\n                    <span className=\"ml-1 px-1.5 py-0.5 text-xs bg-white bg-opacity-20 rounded-full\">\n                      â\n                    </span>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Deudores Principales */}\n          {Array.isArray(topDebtors) && topDebtors.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2 text-red-600\">\n                  <CreditCard className=\"h-5 w-5\" />\n                  <span>Principales Deudores</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {topDebtors.slice(0, 5).map((customer: any) => (\n                    <div key={customer.id} className=\"flex items-center justify-between p-3 border border-red-200 rounded-lg bg-red-50\" data-testid={`debtor-card-${customer.id}`}>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                          <Users className=\"h-5 w-5 text-red-600\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-foreground\">{customer.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">{customer.phone || 'Sin telÃ©fono'}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-lg font-bold text-red-600\">${Number(customer.currentDebt || 0).toFixed(2)}</p>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"mt-1\"\n                          data-testid={`button-contact-${customer.id}`}\n                        >\n                          <MessageCircle className=\"h-4 w-4 mr-1\" />\n                          Contactar\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Lista de Todos los Clientes */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5\" />\n                <span>Todos los Clientes ({totalCustomers})</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {customersLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Cargando clientes...</p>\n                </div>\n              ) : filteredCustomers.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>{searchTerm ? 'No se encontraron clientes.' : 'No hay clientes registrados aÃºn.'}</p>\n                  <p className=\"text-sm\">{searchTerm ? 'Intenta con otro tÃ©rmino de bÃºsqueda.' : 'Comienza agregando tu primer cliente.'}</p>\n                  {!searchTerm && (\n                    <Button className=\"mt-4\" onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-first-customer\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Agregar Primer Cliente\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Cliente</TableHead>\n                      <TableHead>Contacto</TableHead>\n                      <TableHead>Documento</TableHead>\n                      <TableHead>Deuda</TableHead>\n                      <TableHead>LÃ­mite</TableHead>\n                      <TableHead className=\"text-right\">Acciones</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredCustomers.map((customer: any) => (\n                      <TableRow key={customer.id} data-testid={`customer-row-${customer.id}`}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{customer.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{customer.address || 'Sin direcciÃ³n'}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"text-sm\">{customer.phone || 'Sin telÃ©fono'}</p>\n                            <p className=\"text-sm text-muted-foreground\">{customer.email || 'Sin email'}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{customer.idDocument || '-'}</span>\n                        </TableCell>\n                        <TableCell>\n                          {Number(customer.currentDebt || 0) > 0 ? (\n                            <Badge variant=\"destructive\">${Number(customer.currentDebt).toFixed(2)}</Badge>\n                          ) : (\n                            <Badge variant=\"secondary\">$0.00</Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">${Number(customer.creditLimit || 0).toFixed(2)}</span>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex items-center justify-end space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(customer)}\n                              data-testid={`button-edit-${customer.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(customer.id)}\n                              data-testid={`button-delete-${customer.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                            {Number(customer.currentDebt || 0) > 0 && (\n                              <>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handlePayment(customer)}\n                                  data-testid={`button-payment-${customer.id}`}\n                                  title=\"Registrar Pago\"\n                                >\n                                  <DollarSign className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleViewAccount(customer)}\n                                  data-testid={`button-account-${customer.id}`}\n                                  title=\"Ver Cuenta\"\n                                >\n                                  <CreditCard className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  data-testid={`button-whatsapp-${customer.id}`}\n                                  title=\"Contactar por WhatsApp\"\n                                >\n                                  <MessageCircle className=\"h-4 w-4\" />\n                                </Button>\n                              </>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {/* Payment Dialog */}\n      <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Registrar Pago</DialogTitle>\n            <DialogDescription>\n              Cliente: {paymentCustomer?.name} - Deuda: ${Number(paymentCustomer?.currentDebt || 0).toFixed(2)}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...paymentForm}>\n            <form onSubmit={paymentForm.handleSubmit(handlePaymentSubmit)} className=\"space-y-4\">\n              <FormField\n                control={paymentForm.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Monto</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} data-testid=\"input-payment-amount\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={paymentForm.control}\n                name=\"paymentMethod\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>MÃ©todo de Pago</FormLabel>\n                    <FormControl>\n                      <select {...field} className=\"w-full p-2 border rounded-md\" data-testid=\"select-payment-method\">\n                        <option value=\"\">Seleccionar mÃ©todo</option>\n                        <option value=\"efectivo\">Efectivo</option>\n                        <option value=\"transferencia\">Transferencia</option>\n                        <option value=\"tarjeta\">Tarjeta</option>\n                      </select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={paymentForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notas</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Notas adicionales (opcional)\" {...field} data-testid=\"input-payment-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsPaymentDialogOpen(false)}\n                  data-testid=\"button-cancel-payment\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createPaymentMutation.isPending}\n                  data-testid=\"button-save-payment\"\n                >\n                  {createPaymentMutation.isPending ? \"Registrando...\" : \"Registrar Pago\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Account Statement Dialog */}\n      <Dialog open={isAccountDialogOpen} onOpenChange={setIsAccountDialogOpen}>\n        <DialogContent className=\"sm:max-w-[700px]\">\n          <DialogHeader>\n            <DialogTitle>Estado de Cuenta</DialogTitle>\n            <DialogDescription>\n              Cliente: {accountCustomer?.name}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Deuda Actual</p>\n                <p className=\"text-2xl font-bold text-red-600\">${Number(accountCustomer?.currentDebt || 0).toFixed(2)}</p>\n              </div>\n              <div>\n                <p className=\"font-medium\">LÃ­mite de CrÃ©dito</p>\n                <p className=\"text-lg\">${Number(accountCustomer?.creditLimit || 0).toFixed(2)}</p>\n              </div>\n            </div>\n            <div className=\"border rounded-lg p-4\">\n              <h4 className=\"font-medium mb-3\">Historial de Movimientos</h4>\n              {salesLoading || paymentsLoading ? (\n                <div className=\"text-center py-4\">\n                  <div className=\"w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n                  <p className=\"text-sm text-muted-foreground\">Cargando historial...</p>\n                </div>\n              ) : (\n                <AccountTransactionHistory \n                  sales={customerSales} \n                  payments={customerPayments} \n                />\n              )}\n            </div>\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={() => setIsAccountDialogOpen(false)}\n                data-testid=\"button-close-account\"\n              >\n                Cerrar\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":39721},"client/src/pages/daily-entry.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar, Plus, Search, QrCode, ShoppingCart, User, DollarSign, Receipt, Calculator, TrendingDown } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertSaleSchema, insertSaleItemSchema, insertExpenseSchema, type Product, type Customer, type Sale, type Expense } from \"@shared/schema\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\n// Form schemas\nconst quickSaleSchema = z.object({\n  productId: z.string().min(1, \"Selecciona un producto\"),\n  productName: z.string().min(1, \"Nombre del producto es requerido\"),\n  quantity: z.string().min(1, \"La cantidad es requerida\").refine(val => !isNaN(parseFloat(val)) && parseFloat(val) > 0, \"La cantidad debe ser mayor a cero\"),\n  unitPrice: z.string().min(1, \"El precio es requerido\"),\n  paymentMethod: z.enum([\"efectivo\", \"transferencia\", \"fiado\"], { required_error: \"Selecciona un mÃ©todo de pago\" }),\n  customerId: z.string().optional(),\n  customerName: z.string().optional(),\n}).refine((data) => {\n  if (data.paymentMethod === \"fiado\" && !data.customerId) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Para ventas fiado debes seleccionar un cliente\",\n  path: [\"customerId\"],\n});\n\nconst expenseSchema = z.object({\n  description: z.string().min(1, \"La descripciÃ³n es requerida\"),\n  amount: z.string().min(1, \"El monto es requerido\").refine(val => !isNaN(parseFloat(val)) && parseFloat(val) > 0, \"El monto debe ser mayor a cero\"),\n  category: z.string().min(1, \"La categorÃ­a es requerida\"),\n  paymentMethod: z.enum([\"efectivo\", \"transferencia\"], { required_error: \"Selecciona un mÃ©todo de pago\" }),\n  notes: z.string().optional(),\n});\n\ntype QuickSaleData = z.infer<typeof quickSaleSchema>;\ntype ExpenseData = z.infer<typeof expenseSchema>;\n\nexport default function DailyEntry() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [selectedDate, setSelectedDate] = useState(() => {\n    // Check localStorage first for persisted date\n    const storedDate = localStorage.getItem('selectedDate');\n    return storedDate || format(new Date(), 'yyyy-MM-dd');\n  });\n\n  // Update localStorage whenever selectedDate changes\n  useEffect(() => {\n    localStorage.setItem('selectedDate', selectedDate);\n  }, [selectedDate]);\n  const [productSearch, setProductSearch] = useState(\"\");\n  const [customerSearch, setCustomerSearch] = useState(\"\");\n  const [showCustomerField, setShowCustomerField] = useState(false);\n  const [showProductSuggestions, setShowProductSuggestions] = useState(false);\n  const [showCustomerSuggestions, setShowCustomerSuggestions] = useState(false);\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"sales\");\n\n  // Form setup\n  const form = useForm<QuickSaleData>({\n    resolver: zodResolver(quickSaleSchema),\n    mode: \"onChange\",\n    defaultValues: {\n      productId: \"\",\n      productName: \"\",\n      quantity: \"1\",\n      unitPrice: \"\",\n      paymentMethod: \"efectivo\",\n      customerId: \"\",\n      customerName: \"\",\n    },\n  });\n\n  // Ensure form resets with correct defaults\n  useEffect(() => {\n    form.reset({\n      productId: \"\",\n      productName: \"\",\n      quantity: \"1\",\n      unitPrice: \"\",\n      paymentMethod: \"efectivo\",\n      customerId: \"\",\n      customerName: \"\",\n    });\n  }, [form]);\n\n  const expenseForm = useForm<ExpenseData>({\n    resolver: zodResolver(expenseSchema),\n    defaultValues: {\n      description: \"\",\n      amount: \"\",\n      category: \"\",\n      paymentMethod: \"efectivo\",\n      notes: \"\",\n    },\n  });\n\n  // API queries\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: ['/api/products'],\n    enabled: !!productSearch && productSearch.length >= 2,\n  });\n\n  const { data: customers = [], isLoading: customersLoading } = useQuery({\n    queryKey: ['/api/customers'],\n    enabled: !!customerSearch && customerSearch.length >= 2,\n  });\n\n  const { data: dailySales = [], isLoading: salesLoading, refetch: refetchSales } = useQuery({\n    queryKey: ['/api/sales', selectedDate],\n    queryFn: () => apiRequest(\"GET\", `/api/sales?startDate=${selectedDate}&endDate=${selectedDate}`),\n  });\n\n  const { data: dailyExpenses = [], isLoading: expensesLoading, refetch: refetchExpenses } = useQuery({\n    queryKey: ['/api/expenses', selectedDate],\n    queryFn: () => apiRequest(\"GET\", `/api/expenses?startDate=${selectedDate}&endDate=${selectedDate}`),\n  });\n\n  // Filter products based on search\n  const filteredProducts = (products as Product[]).filter((product: Product) =>\n    product.name.toLowerCase().includes(productSearch.toLowerCase()) ||\n    product.barcode?.toLowerCase().includes(productSearch.toLowerCase())\n  ).slice(0, 10);\n\n  // Filter customers based on search\n  const filteredCustomers = (customers as Customer[]).filter((customer: Customer) =>\n    customer.name.toLowerCase().includes(customerSearch.toLowerCase())\n  ).slice(0, 10);\n\n  // Mutations\n  const createSaleMutation = useMutation({\n    mutationFn: async (data: { sale: any; items: any[] }) => {\n      return await apiRequest(\"POST\", \"/api/sales\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Venta registrada\",\n        description: \"La venta se registrÃ³ exitosamente.\",\n      });\n      form.reset();\n      setProductSearch(\"\");\n      setCustomerSearch(\"\");\n      setShowCustomerField(false);\n      refetchSales();\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/quick-stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/sales'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error al registrar venta\",\n        description: error.message || \"No se pudo registrar la venta\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (expenseData: ExpenseData) => {\n      const data = {\n        ...expenseData,\n        expenseDate: selectedDate,\n      };\n      return await apiRequest(\"POST\", \"/api/expenses\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Gasto registrado\",\n        description: \"El gasto se registrÃ³ exitosamente.\",\n      });\n      expenseForm.reset();\n      setIsExpenseDialogOpen(false);\n      refetchExpenses();\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({ queryKey: ['/api/expenses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/quick-stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error al registrar gasto\",\n        description: error.message || \"No se pudo registrar el gasto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"No autorizado\",\n        description: \"Debes iniciar sesiÃ³n para acceder al sistema.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Handle payment method change\n  const paymentMethod = form.watch(\"paymentMethod\");\n  useEffect(() => {\n    setShowCustomerField(paymentMethod === \"fiado\");\n    // No borramos automÃ¡ticamente el cliente - permitir registro en todas las ventas\n  }, [paymentMethod, form]);\n\n  // Form submission\n  const onSubmit = async (data: QuickSaleData) => {\n    try {\n      const quantity = parseFloat(data.quantity);\n      const unitPrice = parseFloat(data.unitPrice);\n      const totalPrice = quantity * unitPrice;\n\n      const saleData = {\n        saleDate: selectedDate,\n        customerId: data.customerId || undefined, // Incluir cliente en todas las ventas si estÃ¡ presente\n        paymentMethod: data.paymentMethod,\n        totalAmount: totalPrice.toString(),\n        isPaid: data.paymentMethod !== \"fiado\",\n        entryMethod: \"manual\",\n      };\n\n      const itemData = {\n        productId: data.productId,\n        quantity: quantity.toString(),\n        unitPrice: data.unitPrice,\n        totalPrice: totalPrice.toString(),\n      };\n\n      await createSaleMutation.mutateAsync({\n        sale: saleData,\n        items: [itemData],\n      });\n    } catch (error) {\n      console.error('Error submitting sale:', error);\n    }\n  };\n\n  const onExpenseSubmit = async (data: ExpenseData) => {\n    try {\n      await createExpenseMutation.mutateAsync(data);\n    } catch (error) {\n      console.error('Error submitting expense:', error);\n    }\n  };\n\n  // Helper functions\n  const selectProduct = (product: Product) => {\n    form.setValue(\"productId\", product.id);\n    form.setValue(\"productName\", product.name);\n    form.setValue(\"unitPrice\", product.salePrice || \"\");\n    setProductSearch(product.name);\n    setShowProductSuggestions(false);\n  };\n\n  const selectCustomer = (customer: Customer) => {\n    form.setValue(\"customerId\", customer.id);\n    form.setValue(\"customerName\", customer.name);\n    setCustomerSearch(customer.name);\n    setShowCustomerSuggestions(false);\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const formattedDate = format(new Date(selectedDate), \"EEEE, d 'de' MMMM 'de' yyyy\", { locale: es });\n  \n  // Daily calculations\n  const totalSales = Array.isArray(dailySales) ? dailySales.reduce((sum: number, sale: any) => sum + parseFloat(sale.totalAmount || 0), 0) : 0;\n  const totalExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.reduce((sum: number, expense: any) => sum + parseFloat(expense.amount || 0), 0) : 0;\n  \n  // Sales by payment method\n  const salesByMethod = Array.isArray(dailySales) ? dailySales.reduce((acc: any, sale: any) => {\n    const method = sale.paymentMethod || 'efectivo';\n    acc[method] = (acc[method] || 0) + parseFloat(sale.totalAmount || 0);\n    return acc;\n  }, {}) : {};\n  \n  // Expenses by payment method\n  const expensesByMethod = Array.isArray(dailyExpenses) ? dailyExpenses.reduce((acc: any, expense: any) => {\n    const method = expense.paymentMethod || 'efectivo';\n    acc[method] = (acc[method] || 0) + parseFloat(expense.amount || 0);\n    return acc;\n  }, {}) : {};\n  \n  // Net totals by payment method\n  const netCash = (salesByMethod.efectivo || 0) - (expensesByMethod.efectivo || 0);\n  const netTransfer = (salesByMethod.transferencia || 0) - (expensesByMethod.transferencia || 0);\n  const netFiado = salesByMethod.fiado || 0;\n  const netTotal = totalSales - totalExpenses;\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"border-b bg-card p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Carga Diaria</h2>\n              <p className=\"text-muted-foreground capitalize\">{formattedDate}</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n                <Input\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"w-auto\"\n                  data-testid=\"input-date\"\n                />\n              </div>\n              <Button className=\"flex items-center space-x-2\" data-testid=\"button-bulk-entry\">\n                <Plus className=\"h-4 w-4\" />\n                <span>Carga Masiva</span>\n              </Button>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm text-muted-foreground\">Total del dÃ­a</p>\n                <p className=\"text-xl font-bold text-green-600\">${totalSales.toFixed(2)}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Daily Reconciliation Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calculator className=\"h-5 w-5\" />\n                <span>Resumen Diario</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">Ventas Totales</p>\n                      <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\">${totalSales.toFixed(2)}</p>\n                    </div>\n                    <ShoppingCart className=\"h-8 w-8 text-green-600\" />\n                  </div>\n                </div>\n                <div className=\"bg-red-50 dark:bg-red-900/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-red-600 dark:text-red-400\">Gastos Totales</p>\n                      <p className=\"text-2xl font-bold text-red-700 dark:text-red-300\">${totalExpenses.toFixed(2)}</p>\n                    </div>\n                    <TrendingDown className=\"h-8 w-8 text-red-600\" />\n                  </div>\n                </div>\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-blue-600 dark:text-blue-400\">Efectivo Neto</p>\n                      <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">${netCash.toFixed(2)}</p>\n                    </div>\n                    <DollarSign className=\"h-8 w-8 text-blue-600\" />\n                  </div>\n                </div>\n                <div className={`${netTotal >= 0 ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20'} p-4 rounded-lg`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className={`text-sm ${netTotal >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>Resultado Neto</p>\n                      <p className={`text-2xl font-bold ${netTotal >= 0 ? 'text-green-700 dark:text-green-300' : 'text-red-700 dark:text-red-300'}`}>${netTotal.toFixed(2)}</p>\n                    </div>\n                    <Calculator className={`h-8 w-8 ${netTotal >= 0 ? 'text-green-600' : 'text-red-600'}`} />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tabs for different sections */}\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid grid-cols-3 w-full\">\n              <TabsTrigger value=\"sales\" className=\"flex items-center space-x-2\">\n                <ShoppingCart className=\"h-4 w-4\" />\n                <span>Ventas</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"expenses\" className=\"flex items-center space-x-2\">\n                <Receipt className=\"h-4 w-4\" />\n                <span>Gastos</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"reconciliation\" className=\"flex items-center space-x-2\">\n                <Calculator className=\"h-4 w-4\" />\n                <span>ConciliaciÃ³n</span>\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Sales Tab */}\n            <TabsContent value=\"sales\" className=\"space-y-6\">\n              {/* Formulario de Nueva Venta */}\n              <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Plus className=\"h-5 w-5\" />\n                <span>Nueva Venta</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {/* Product Search */}\n                    <div className=\"space-y-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"productName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Producto</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input \n                                  {...field}\n                                  placeholder=\"Buscar producto...\"\n                                  className=\"pr-10\"\n                                  data-testid=\"input-product\"\n                                  value={productSearch}\n                                  onChange={(e) => {\n                                    const value = e.target.value;\n                                    setProductSearch(value);\n                                    setShowProductSuggestions(value.length >= 2);\n                                    if (!value) {\n                                      form.setValue(\"productId\", \"\");\n                                      form.setValue(\"unitPrice\", \"\");\n                                      setShowProductSuggestions(false);\n                                    }\n                                  }}\n                                />\n                                <Search className=\"absolute right-3 top-2.5 h-4 w-4 text-muted-foreground\" />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      {/* Product suggestions */}\n                      {showProductSuggestions && filteredProducts.length > 0 && (\n                        <div className=\"border rounded-md bg-background shadow-lg absolute z-10 w-full max-w-sm\">\n                          {filteredProducts.map((product: Product) => (\n                            <div\n                              key={product.id}\n                              className=\"p-3 hover:bg-muted cursor-pointer border-b last:border-b-0\"\n                              onClick={() => selectProduct(product)}\n                              data-testid={`product-option-${product.id}`}\n                            >\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"font-medium\">{product.name}</span>\n                                <span className=\"text-green-600\">${product.salePrice}</span>\n                              </div>\n                              {product.currentStock !== undefined && (\n                                <p className=\"text-sm text-muted-foreground\">Stock: {product.currentStock}</p>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Quantity Input */}\n                    <FormField\n                      control={form.control}\n                      name=\"quantity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Cantidad</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field}\n                              type=\"number\" \n                              placeholder=\"1\" \n                              min=\"1\"\n                              step=\"0.1\"\n                              data-testid=\"input-quantity\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {/* Payment Method */}\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>MÃ©todo de Pago</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-payment-method\">\n                                <SelectValue placeholder=\"Seleccionar mÃ©todo\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"efectivo\">ðµ Efectivo</SelectItem>\n                              <SelectItem value=\"transferencia\">ð³ Transferencia</SelectItem>\n                              <SelectItem value=\"fiado\">ð Fiado</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {/* Customer Search - Always available */}\n                    <div className=\"space-y-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"customerName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>\n                              Cliente \n                              {paymentMethod === \"fiado\" && <span className=\"text-red-500\">*</span>}\n                              {paymentMethod !== \"fiado\" && <span className=\"text-xs text-muted-foreground\">(opcional)</span>}\n                            </FormLabel>\n                              <FormControl>\n                                <div className=\"relative\">\n                                  <Input \n                                    {...field}\n                                    placeholder=\"Nombre del cliente...\"\n                                    className=\"pr-10\"\n                                    data-testid=\"input-customer\"\n                                    value={customerSearch}\n                                    onChange={(e) => {\n                                      const value = e.target.value;\n                                      setCustomerSearch(value);\n                                      setShowCustomerSuggestions(value.length >= 2);\n                                      if (!value) {\n                                        form.setValue(\"customerId\", \"\");\n                                        setShowCustomerSuggestions(false);\n                                      }\n                                    }}\n                                  />\n                                  <User className=\"absolute right-3 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        {/* Customer suggestions */}\n                        {showCustomerSuggestions && filteredCustomers.length > 0 && (\n                          <div className=\"border rounded-md bg-background shadow-lg absolute z-10 w-full max-w-sm\">\n                            {filteredCustomers.map((customer: Customer) => (\n                              <div\n                                key={customer.id}\n                                className=\"p-3 hover:bg-muted cursor-pointer border-b last:border-b-0\"\n                                onClick={() => selectCustomer(customer)}\n                                data-testid={`customer-option-${customer.id}`}\n                              >\n                                <div className=\"flex justify-between items-center\">\n                                  <span className=\"font-medium\">{customer.name}</span>\n                                  {customer.currentDebt && parseFloat(customer.currentDebt) > 0 && (\n                                    <span className=\"text-orange-600 text-sm\">Debe: ${customer.currentDebt}</span>\n                                  )}\n                                </div>\n                                {customer.phone && (\n                                  <p className=\"text-sm text-muted-foreground\">{customer.phone}</p>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                    </div>\n                  </div>\n                  \n                  {/* Price Display */}\n                  {(() => {\n                    const unitPrice = form.watch(\"unitPrice\");\n                    const quantity = form.watch(\"quantity\");\n                    return unitPrice && quantity && (\n                      <div className=\"bg-muted p-4 rounded-lg\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-muted-foreground\">Precio unitario:</span>\n                          <span className=\"font-medium\">${parseFloat(unitPrice || \"0\").toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-muted-foreground\">Cantidad:</span>\n                          <span className=\"font-medium\">{parseFloat(quantity || \"0\").toFixed(1)}</span>\n                        </div>\n                        <hr className=\"my-2\" />\n                        <div className=\"flex justify-between items-center text-lg font-bold\">\n                          <span>Total:</span>\n                          <span className=\"text-green-600\">\n                            ${(parseFloat(unitPrice || \"0\") * parseFloat(quantity || \"0\")).toFixed(2)}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })()}\n                  \n                  <div className=\"flex space-x-3\">\n                    <Button \n                      type=\"submit\" \n                      className=\"flex-1 flex items-center justify-center space-x-2\"\n                      data-testid=\"button-register-sale\"\n                      disabled={createSaleMutation.isPending || !form.formState.isValid}\n                    >\n                      {createSaleMutation.isPending ? (\n                        <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                      ) : (\n                        <ShoppingCart className=\"h-4 w-4\" />\n                      )}\n                      <span>{createSaleMutation.isPending ? \"Registrando...\" : \"Registrar Venta\"}</span>\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      className=\"px-6 flex items-center space-x-2\"\n                      data-testid=\"button-scan-barcode\"\n                    >\n                      <QrCode className=\"h-4 w-4\" />\n                      <span>Escanear</span>\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n              {/* Lista de Ventas del DÃ­a */}\n              <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Ventas del DÃ­a Seleccionado</span>\n                {Array.isArray(dailySales) && dailySales.length > 0 && (\n                  <span className=\"text-sm font-normal text-muted-foreground\">\n                    {dailySales.length} venta{dailySales.length !== 1 ? 's' : ''}\n                  </span>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {salesLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                  <span className=\"ml-2 text-muted-foreground\">Cargando ventas...</span>\n                </div>\n              ) : Array.isArray(dailySales) && dailySales.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {dailySales.map((sale: any) => (\n                    <div key={sale.id} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <DollarSign className=\"h-4 w-4 text-green-600\" />\n                            <span className=\"font-medium\">${sale.totalAmount}</span>\n                            <span className=\"text-sm px-2 py-1 bg-blue-100 text-blue-800 rounded-full\">\n                              {sale.paymentMethod === 'efectivo' ? 'ðµ Efectivo' :\n                               sale.paymentMethod === 'transferencia' ? 'ð³ Transferencia' :\n                               'ð Fiado'}\n                            </span>\n                          </div>\n                          {sale.customer && (\n                            <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                              <User className=\"h-3 w-3\" />\n                              <span>Cliente: {sale.customer.name}</span>\n                            </div>\n                          )}\n                          {sale.notes && (\n                            <p className=\"text-sm text-muted-foreground\">{sale.notes}</p>\n                          )}\n                        </div>\n                        <div className=\"text-right text-sm text-muted-foreground\">\n                          <p>{format(new Date(sale.createdAt), 'HH:mm', { locale: es })}</p>\n                          <p className={`px-2 py-1 rounded-full text-xs ${\n                            sale.isPaid \n                              ? 'bg-green-100 text-green-800' \n                              : 'bg-orange-100 text-orange-800'\n                          }`}>\n                            {sale.isPaid ? 'Pagado' : 'Pendiente'}\n                          </p>\n                        </div>\n                      </div>\n                      {sale.items && sale.items.length > 0 && (\n                        <div className=\"mt-3 pt-3 border-t border-border/50\">\n                          <div className=\"space-y-1\">\n                            {sale.items.map((item: any, index: number) => (\n                              <div key={index} className=\"flex justify-between items-center text-sm\">\n                                <span className=\"text-muted-foreground\">\n                                  {item.product?.name || 'Producto'} x {parseFloat(item.quantity).toFixed(1)}\n                                </span>\n                                <span>${item.totalPrice}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Calendar className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No hay ventas registradas para esta fecha.</p>\n                  <p className=\"text-sm\">Utiliza el formulario superior para agregar ventas.</p>\n                </div>\n              )}\n              </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Expenses Tab */}\n            <TabsContent value=\"expenses\" className=\"space-y-6\">\n              {/* Expense Form */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Receipt className=\"h-5 w-5\" />\n                      <span>Registrar Gasto</span>\n                    </div>\n                    <Dialog open={isExpenseDialogOpen} onOpenChange={setIsExpenseDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button className=\"flex items-center space-x-2\" data-testid=\"button-add-expense\">\n                          <Plus className=\"h-4 w-4\" />\n                          <span>Agregar Gasto</span>\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Registrar Nuevo Gasto</DialogTitle>\n                          <DialogDescription>\n                            Registra un gasto para la fecha seleccionada\n                          </DialogDescription>\n                        </DialogHeader>\n                        <Form {...expenseForm}>\n                          <form onSubmit={expenseForm.handleSubmit(onExpenseSubmit)} className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              <FormField\n                                control={expenseForm.control}\n                                name=\"description\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>DescripciÃ³n</FormLabel>\n                                    <FormControl>\n                                      <Input {...field} placeholder=\"DescripciÃ³n del gasto\" data-testid=\"input-expense-description\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={expenseForm.control}\n                                name=\"amount\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Monto</FormLabel>\n                                    <FormControl>\n                                      <Input {...field} type=\"number\" placeholder=\"0.00\" min=\"0\" step=\"0.01\" data-testid=\"input-expense-amount\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              <FormField\n                                control={expenseForm.control}\n                                name=\"category\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>CategorÃ­a</FormLabel>\n                                    <Select onValueChange={field.onChange} value={field.value}>\n                                      <FormControl>\n                                        <SelectTrigger data-testid=\"select-expense-category\">\n                                          <SelectValue placeholder=\"Seleccionar categorÃ­a\" />\n                                        </SelectTrigger>\n                                      </FormControl>\n                                      <SelectContent>\n                                        <SelectItem value=\"proveedores\">ð¦ Proveedores</SelectItem>\n                                        <SelectItem value=\"servicios\">â¡ Servicios</SelectItem>\n                                        <SelectItem value=\"sueldos\">ð¥ Sueldos</SelectItem>\n                                        <SelectItem value=\"transporte\">ð Transporte</SelectItem>\n                                        <SelectItem value=\"marketing\">ð¢ Marketing</SelectItem>\n                                        <SelectItem value=\"mantenimiento\">ð§ Mantenimiento</SelectItem>\n                                        <SelectItem value=\"otros\">ð Otros</SelectItem>\n                                      </SelectContent>\n                                    </Select>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={expenseForm.control}\n                                name=\"paymentMethod\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>MÃ©todo de Pago</FormLabel>\n                                    <Select onValueChange={field.onChange} value={field.value}>\n                                      <FormControl>\n                                        <SelectTrigger data-testid=\"select-expense-payment\">\n                                          <SelectValue placeholder=\"MÃ©todo de pago\" />\n                                        </SelectTrigger>\n                                      </FormControl>\n                                      <SelectContent>\n                                        <SelectItem value=\"efectivo\">ðµ Efectivo</SelectItem>\n                                        <SelectItem value=\"transferencia\">ð³ Transferencia</SelectItem>\n                                      </SelectContent>\n                                    </Select>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                            <FormField\n                              control={expenseForm.control}\n                              name=\"notes\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Notas (Opcional)</FormLabel>\n                                  <FormControl>\n                                    <Textarea {...field} placeholder=\"Notas adicionales...\" data-testid=\"textarea-expense-notes\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <div className=\"flex justify-end space-x-3\">\n                              <Button type=\"button\" variant=\"outline\" onClick={() => setIsExpenseDialogOpen(false)}>\n                                Cancelar\n                              </Button>\n                              <Button type=\"submit\" disabled={createExpenseMutation.isPending} data-testid=\"button-submit-expense\">\n                                {createExpenseMutation.isPending ? (\n                                  <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2\" />\n                                ) : (\n                                  <Receipt className=\"h-4 w-4 mr-2\" />\n                                )}\n                                {createExpenseMutation.isPending ? \"Registrando...\" : \"Registrar Gasto\"}\n                              </Button>\n                            </div>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {expensesLoading ? (\n                    <div className=\"flex items-center justify-center py-8\">\n                      <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                      <span className=\"ml-2 text-muted-foreground\">Cargando gastos...</span>\n                    </div>\n                  ) : Array.isArray(dailyExpenses) && dailyExpenses.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {dailyExpenses.map((expense: any) => (\n                        <div key={expense.id} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Receipt className=\"h-4 w-4 text-red-600\" />\n                                <span className=\"font-medium\">{expense.description}</span>\n                                <span className=\"text-sm px-2 py-1 bg-red-100 text-red-800 rounded-full\">\n                                  ${expense.amount}\n                                </span>\n                              </div>\n                              <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                                <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded-full\">\n                                  {expense.category}\n                                </span>\n                                <span>\n                                  {expense.paymentMethod === 'efectivo' ? 'ðµ Efectivo' : 'ð³ Transferencia'}\n                                </span>\n                              </div>\n                              {expense.notes && (\n                                <p className=\"text-sm text-muted-foreground\">{expense.notes}</p>\n                              )}\n                            </div>\n                            <div className=\"text-right text-sm text-muted-foreground\">\n                              <p>{format(new Date(expense.createdAt), 'HH:mm', { locale: es })}</p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Receipt className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No hay gastos registrados para esta fecha.</p>\n                      <p className=\"text-sm\">Utiliza el botÃ³n \"Agregar Gasto\" para registrar gastos.</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Reconciliation Tab */}\n            <TabsContent value=\"reconciliation\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Calculator className=\"h-5 w-5\" />\n                    <span>ConciliaciÃ³n Diaria Detallada</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {/* Ingresos por mÃ©todo */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold text-green-700 dark:text-green-300 flex items-center\">\n                        <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                        Ingresos por MÃ©todo\n                      </h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                          <span>ðµ Efectivo</span>\n                          <span className=\"font-semibold\">${(salesByMethod.efectivo || 0).toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                          <span>ð³ Transferencias</span>\n                          <span className=\"font-semibold\">${(salesByMethod.transferencia || 0).toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                          <span>ð Fiado</span>\n                          <span className=\"font-semibold\">${(salesByMethod.fiado || 0).toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-green-100 dark:bg-green-800/30 rounded-lg font-bold\">\n                          <span>Total Ventas</span>\n                          <span>${totalSales.toFixed(2)}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Gastos por mÃ©todo */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold text-red-700 dark:text-red-300 flex items-center\">\n                        <TrendingDown className=\"h-5 w-5 mr-2\" />\n                        Gastos por MÃ©todo\n                      </h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                          <span>ðµ Efectivo</span>\n                          <span className=\"font-semibold\">${(expensesByMethod.efectivo || 0).toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                          <span>ð³ Transferencias</span>\n                          <span className=\"font-semibold\">${(expensesByMethod.transferencia || 0).toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-red-100 dark:bg-red-800/30 rounded-lg font-bold\">\n                          <span>Total Gastos</span>\n                          <span>${totalExpenses.toFixed(2)}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Net Balance */}\n                  <div className=\"mt-6 pt-6 border-t\">\n                    <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                      <Calculator className=\"h-5 w-5 mr-2\" />\n                      Balance Neto por MÃ©todo\n                    </h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className={`p-4 rounded-lg ${netCash >= 0 ? 'bg-green-100 dark:bg-green-900/30' : 'bg-red-100 dark:bg-red-900/30'}`}>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm opacity-75\">Efectivo Neto</p>\n                          <p className={`text-xl font-bold ${netCash >= 0 ? 'text-green-700 dark:text-green-300' : 'text-red-700 dark:text-red-300'}`}>\n                            ${netCash.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                      <div className={`p-4 rounded-lg ${netTransfer >= 0 ? 'bg-green-100 dark:bg-green-900/30' : 'bg-red-100 dark:bg-red-900/30'}`}>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm opacity-75\">Transferencias Netas</p>\n                          <p className={`text-xl font-bold ${netTransfer >= 0 ? 'text-green-700 dark:text-green-300' : 'text-red-700 dark:text-red-300'}`}>\n                            ${netTransfer.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                      <div className={`p-4 rounded-lg ${netTotal >= 0 ? 'bg-green-100 dark:bg-green-900/30' : 'bg-red-100 dark:bg-red-900/30'}`}>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm opacity-75\">Resultado Final</p>\n                          <p className={`text-2xl font-bold ${netTotal >= 0 ? 'text-green-700 dark:text-green-300' : 'text-red-700 dark:text-red-300'}`}>\n                            ${netTotal.toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":50711},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport SalesSummary from \"@/components/dashboard/sales-summary\";\nimport QuickSaleForm from \"@/components/dashboard/quick-sale-form\";\nimport StockAlerts from \"@/components/dashboard/stock-alerts\";\nimport DailySales from \"@/components/dashboard/daily-sales\";\nimport TopDebtors from \"@/components/dashboard/top-debtors\";\nimport AiSummary from \"@/components/dashboard/ai-summary\";\nimport ApiStatus from \"@/components/dashboard/api-status\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [selectedDate, setSelectedDate] = useState(() => {\n    // Check localStorage first for persisted date\n    const storedDate = localStorage.getItem('selectedDate');\n    return storedDate || format(new Date(), 'yyyy-MM-dd');\n  });\n\n  // Update localStorage whenever selectedDate changes\n  useEffect(() => {\n    localStorage.setItem('selectedDate', selectedDate);\n  }, [selectedDate]);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"No autorizado\",\n        description: \"Debes iniciar sesiÃ³n para acceder al sistema.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando sistema...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect in useEffect\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header />\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Date Selector */}\n          <div className=\"flex items-center justify-between bg-card rounded-lg p-4 border\">\n            <div>\n              <h2 className=\"text-lg font-semibold\">Panel Principal</h2>\n              <p className=\"text-muted-foreground\">Gestiona tu negocio desde aquÃ­</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Label htmlFor=\"date-selector\" className=\"flex items-center space-x-2 text-sm font-medium\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>Fecha:</span>\n              </Label>\n              <Input\n                id=\"date-selector\"\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => setSelectedDate(e.target.value)}\n                className=\"w-auto\"\n                data-testid=\"input-dashboard-date\"\n              />\n            </div>\n          </div>\n          \n          {/* Resumen del DÃ­a */}\n          <SalesSummary date={selectedDate} />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Carga RÃ¡pida */}\n            <div className=\"lg:col-span-2\">\n              <QuickSaleForm />\n            </div>\n            \n            {/* Alertas de Stock */}\n            <StockAlerts />\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Ventas del DÃ­a */}\n            <DailySales date={selectedDate} />\n            \n            {/* Deudores Principales */}\n            <TopDebtors />\n          </div>\n          \n          {/* Resumen Inteligente con IA */}\n          <AiSummary date={selectedDate} />\n          \n          {/* Estado de la API y ConexiÃ³n MÃ³vil */}\n          <ApiStatus date={selectedDate} />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":4304},"client/src/pages/finances.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  DollarSign, \n  TrendingUp, \n  TrendingDown, \n  Calculator, \n  FileText, \n  Plus,\n  Calendar,\n  Receipt,\n  CheckCircle,\n  Clock\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\n// Expense form schema\nconst expenseSchema = z.object({\n  description: z.string().min(1, \"La descripciÃ³n es requerida\"),\n  amount: z.string().min(1, \"El monto es requerido\").refine(val => !isNaN(parseFloat(val)) && parseFloat(val) > 0, \"El monto debe ser mayor a cero\"),\n  category: z.string().min(1, \"La categorÃ­a es requerida\"),\n  paymentMethod: z.enum([\"efectivo\", \"transferencia\"], { required_error: \"Selecciona un mÃ©todo de pago\" }),\n  notes: z.string().optional(),\n});\n\ntype ExpenseData = z.infer<typeof expenseSchema>;\ntype ExpensePayload = ExpenseData & { expenseDate: string; };\n\nexport default function Finances() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [selectedDate, setSelectedDate] = useState(format(new Date(), 'yyyy-MM-dd'));\n  const [isCashClosingOpen, setIsCashClosingOpen] = useState(false);\n  const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\n  const [cashClosed, setCashClosed] = useState(false);\n\n  // Expense form setup\n  const expenseForm = useForm<ExpenseData>({\n    resolver: zodResolver(expenseSchema),\n    defaultValues: {\n      description: \"\",\n      amount: \"\",\n      category: \"\",\n      paymentMethod: \"efectivo\",\n      notes: \"\",\n    },\n  });\n\n  // API queries for financial data with error handling\n  const { data: dailySales = [], isLoading: salesLoading, error: salesError } = useQuery({\n    queryKey: ['/api/sales', selectedDate],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/sales?startDate=${selectedDate}&endDate=${selectedDate}`);\n      return await response.json();\n    },\n    enabled: !!selectedDate,\n  });\n\n  const { data: dailyExpenses = [], isLoading: expensesLoading, error: expensesError } = useQuery({\n    queryKey: ['/api/expenses', selectedDate],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/expenses?startDate=${selectedDate}&endDate=${selectedDate}`);\n      return await response.json();\n    },\n    enabled: !!selectedDate,\n  });\n\n  const { data: dailyPayments = [], isLoading: paymentsLoading, error: paymentsError } = useQuery({\n    queryKey: ['/api/payments', selectedDate],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/payments?startDate=${selectedDate}&endDate=${selectedDate}`);\n      return await response.json();\n    },\n    enabled: !!selectedDate,\n  });\n\n  // Handle API errors\n  useEffect(() => {\n    if (salesError) {\n      toast({\n        title: \"Error al cargar ventas\",\n        description: \"No se pudieron cargar las ventas del dÃ­a seleccionado\",\n        variant: \"destructive\",\n      });\n    }\n    if (expensesError) {\n      toast({\n        title: \"Error al cargar gastos\", \n        description: \"No se pudieron cargar los gastos del dÃ­a seleccionado\",\n        variant: \"destructive\",\n      });\n    }\n    if (paymentsError) {\n      toast({\n        title: \"Error al cargar pagos\",\n        description: \"No se pudieron cargar los pagos del dÃ­a seleccionado\",\n        variant: \"destructive\",\n      });\n    }\n  }, [salesError, expensesError, paymentsError, toast]);\n\n  // Create expense mutation\n  const createExpenseMutation = useMutation({\n    mutationFn: async (expensePayload: ExpensePayload) => {\n      return await apiRequest(\"POST\", \"/api/expenses\", expensePayload);\n    },\n    onSuccess: (data) => {\n      console.log('Expense created successfully:', data);\n      console.log('Invalidating cache for date:', selectedDate);\n      \n      toast({\n        title: \"Gasto registrado\",\n        description: \"El gasto se registrÃ³ exitosamente.\",\n      });\n      \n      expenseForm.reset();\n      setIsExpenseDialogOpen(false);\n      \n      // Invalidate and refetch relevant caches\n      queryClient.invalidateQueries({ queryKey: ['/api/expenses', selectedDate] });\n      queryClient.invalidateQueries({ queryKey: ['/api/expenses'] }); // Invalidate all expense queries\n      \n      // Force refetch of the specific expenses query\n      queryClient.refetchQueries({ queryKey: ['/api/expenses', selectedDate] });\n      \n      console.log('Cache invalidation completed');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error al registrar gasto\",\n        description: error.message || \"No se pudo registrar el gasto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle expense form submission\n  const onExpenseSubmit = (data: ExpenseData) => {\n    const expensePayload: ExpensePayload = {\n      ...data,\n      expenseDate: selectedDate,\n    };\n    createExpenseMutation.mutate(expensePayload);\n  };\n\n  // Financial calculations\n  const totalSales = Array.isArray(dailySales) ? dailySales.reduce((sum: number, sale: any) => sum + parseFloat(sale.totalAmount || 0), 0) : 0;\n  const totalExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.reduce((sum: number, expense: any) => sum + parseFloat(expense.amount || 0), 0) : 0;\n  const totalPayments = Array.isArray(dailyPayments) ? dailyPayments.reduce((sum: number, payment: any) => sum + parseFloat(payment.amount || 0), 0) : 0;\n  \n  // Sales by payment method\n  const salesByMethod = Array.isArray(dailySales) ? dailySales.reduce((acc: any, sale: any) => {\n    const method = sale.paymentMethod || 'efectivo';\n    acc[method] = (acc[method] || 0) + parseFloat(sale.totalAmount || 0);\n    return acc;\n  }, {}) : {};\n  \n  // Expenses by payment method \n  const expensesByMethod = Array.isArray(dailyExpenses) ? dailyExpenses.reduce((acc: any, expense: any) => {\n    const method = expense.paymentMethod || 'efectivo';\n    acc[method] = (acc[method] || 0) + parseFloat(expense.amount || 0);\n    return acc;\n  }, {}) : {};\n  \n  // Fiado (credit) sales - tracked separately, NOT counted as income\n  const fiadoSales = salesByMethod.fiado || 0;\n  \n  // CORRECTED Net calculations - Only count cash and transfer sales as actual income\n  // Fiado sales are credit given, not actual money received\n  const actualSalesIncome = (salesByMethod.efectivo || 0) + (salesByMethod.transferencia || 0);\n  const netIncome = actualSalesIncome + totalPayments; // Only actual money received\n  const netBalance = netIncome - totalExpenses;\n  \n  // Payments by method with proper type checking\n  const cashPayments = Array.isArray(dailyPayments) ? dailyPayments.filter((p: any) => p.paymentMethod === 'efectivo').reduce((sum: number, p: any) => sum + parseFloat(p.amount || 0), 0) : 0;\n  const transferPayments = Array.isArray(dailyPayments) ? dailyPayments.filter((p: any) => p.paymentMethod === 'transferencia').reduce((sum: number, p: any) => sum + parseFloat(p.amount || 0), 0) : 0;\n  \n  const cashIncome = (salesByMethod.efectivo || 0) + cashPayments;\n  const transferIncome = (salesByMethod.transferencia || 0) + transferPayments;\n  \n  const isDataLoading = salesLoading || expensesLoading || paymentsLoading;\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"No autorizado\",\n        description: \"Debes iniciar sesiÃ³n para acceder al sistema.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Helper function to ensure valid date\n  const getValidDate = (dateString: string) => {\n    if (!dateString || dateString === '') return new Date();\n    const date = new Date(dateString);\n    return isNaN(date.getTime()) ? new Date() : date;\n  };\n  \n  const formattedDate = format(getValidDate(selectedDate), \"EEEE, d 'de' MMMM 'de' yyyy\", { locale: es });\n\n  // Enhanced cash closing with reconciliation\n  const [actualCash, setActualCash] = useState(\"\");\n  const [actualTransfers, setActualTransfers] = useState(\"\");\n  const [closingNotes, setClosingNotes] = useState(\"\");\n\n  const handleCloseCash = async () => {\n    if (!actualCash || !actualTransfers) {\n      toast({\n        title: \"Datos incompletos\",\n        description: \"Por favor ingrese los montos reales de efectivo y transferencias\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Calculate expected amounts from daily data\n      const cashSales = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'efectivo').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n      const transferSales = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'transferencia').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n      const cashExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.filter(expense => expense.paymentMethod === 'efectivo').reduce((sum, expense) => sum + Number(expense.amount), 0) : 0;\n      const transferExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.filter(expense => expense.paymentMethod === 'transferencia').reduce((sum, expense) => sum + Number(expense.amount), 0) : 0;\n      \n      // Include debt payments (customer payments received) in expected amounts\n      const cashDebtPayments = Array.isArray(dailyPayments) ? dailyPayments.filter(payment => payment.paymentMethod === 'efectivo').reduce((sum, payment) => sum + Number(payment.amount), 0) : 0;\n      const transferDebtPayments = Array.isArray(dailyPayments) ? dailyPayments.filter(payment => payment.paymentMethod === 'transferencia').reduce((sum, payment) => sum + Number(payment.amount), 0) : 0;\n      \n      const debtCollectedAmount = Array.isArray(dailyPayments) ? dailyPayments.reduce((sum, payment) => sum + Number(payment.amount), 0) : 0;\n      const creditGivenAmount = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'fiado').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n      \n      // Correct expected amounts: sales + debt payments - expenses\n      const expectedCash = cashSales + cashDebtPayments - cashExpenses;\n      const expectedTransfers = transferSales + transferDebtPayments - transferExpenses;\n      const actualCashNum = parseFloat(actualCash);\n      const actualTransfersNum = parseFloat(actualTransfers);\n      \n      // Validate numeric inputs to prevent NaN\n      if (isNaN(actualCashNum) || isNaN(actualTransfersNum)) {\n        toast({\n          title: \"Valores invÃ¡lidos\",\n          description: \"Por favor ingrese nÃºmeros vÃ¡lidos para efectivo y transferencias\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const cashClosingData = {\n        closingDate: selectedDate,\n        // closedBy is set server-side for security - never trust client\n        expectedCash: expectedCash.toString(),\n        expectedTransfers: expectedTransfers.toString(),\n        actualCash: actualCash,\n        actualTransfers: actualTransfers,\n        cashVariance: (actualCashNum - expectedCash).toString(),\n        transferVariance: (actualTransfersNum - expectedTransfers).toString(),\n        totalSales: (cashSales + transferSales).toString(),\n        totalExpenses: (cashExpenses + transferExpenses).toString(),\n        debtCollected: debtCollectedAmount.toString(),\n        creditGiven: creditGivenAmount.toString(),\n        notes: closingNotes,\n        reconciliationStatus: Math.abs(actualCashNum - expectedCash) > 1 || Math.abs(actualTransfersNum - expectedTransfers) > 1 ? \"discrepancy\" : \"completed\"\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/cash-closings\", cashClosingData);\n      \n      setCashClosed(true);\n      setIsCashClosingOpen(false);\n      setActualCash(\"\");\n      setActualTransfers(\"\");\n      setClosingNotes(\"\");\n      \n      toast({\n        title: \"Caja cerrada con Ã©xito\",\n        description: `ReconciliaciÃ³n completa para el ${formattedDate}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error al cerrar caja\",\n        description: \"No se pudo completar el cierre de caja\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"border-b bg-card p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Finanzas y Reportes</h2>\n              <p className=\"text-muted-foreground\">Flujo de caja y anÃ¡lisis financiero</p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"w-auto\"\n                  data-testid=\"input-finance-date\"\n                />\n              </div>\n              <Dialog open={isCashClosingOpen} onOpenChange={setIsCashClosingOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"flex items-center space-x-2\" data-testid=\"button-close-cash\" disabled={cashClosed}>\n                    <Calculator className=\"h-4 w-4\" />\n                    <span>{cashClosed ? 'Caja Cerrada' : 'Cerrar Caja'}</span>\n                    {cashClosed && <CheckCircle className=\"h-4 w-4 text-green-600\" />}\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[600px]\" data-testid=\"dialog-cash-reconciliation\">\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center space-x-2\">\n                      <Calculator className=\"h-5 w-5\" />\n                      <span>ReconciliaciÃ³n y Cierre de Caja</span>\n                    </DialogTitle>\n                    <DialogDescription>\n                      ReconciliaciÃ³n detallada para el {formattedDate}. Ingrese los montos fÃ­sicos contados.\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-6\">\n                    {/* Expected vs Actual Summary */}\n                    <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold mb-3\">Montos Esperados (Sistema)</h4>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">ðµ Efectivo esperado:</span>\n                          <p className=\"font-medium\">${(() => {\n                            const cashSales = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'efectivo').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n                            const cashExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.filter(expense => expense.paymentMethod === 'efectivo').reduce((sum, expense) => sum + Number(expense.amount), 0) : 0;\n                            const cashDebtPayments = Array.isArray(dailyPayments) ? dailyPayments.filter(payment => payment.paymentMethod === 'efectivo').reduce((sum, payment) => sum + Number(payment.amount), 0) : 0;\n                            return (cashSales + cashDebtPayments - cashExpenses).toFixed(2);\n                          })()}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">ð³ Transferencias esperadas:</span>\n                          <p className=\"font-medium\">${(() => {\n                            const transferSales = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'transferencia').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n                            const transferExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.filter(expense => expense.paymentMethod === 'transferencia').reduce((sum, expense) => sum + Number(expense.amount), 0) : 0;\n                            const transferDebtPayments = Array.isArray(dailyPayments) ? dailyPayments.filter(payment => payment.paymentMethod === 'transferencia').reduce((sum, payment) => sum + Number(payment.amount), 0) : 0;\n                            return (transferSales + transferDebtPayments - transferExpenses).toFixed(2);\n                          })()}</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Physical Count Inputs */}\n                    <div className=\"bg-yellow-50 dark:bg-yellow-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold mb-3\">Conteo FÃ­sico</h4>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"actual-cash\">ðµ Efectivo Contado</Label>\n                          <Input\n                            id=\"actual-cash\"\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"0.00\"\n                            value={actualCash}\n                            onChange={(e) => setActualCash(e.target.value)}\n                            data-testid=\"input-actual-cash\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"actual-transfers\">ð³ Transferencias Confirmadas</Label>\n                          <Input\n                            id=\"actual-transfers\"\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"0.00\"\n                            value={actualTransfers}\n                            onChange={(e) => setActualTransfers(e.target.value)}\n                            data-testid=\"input-actual-transfers\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Variance Calculation */}\n                    {(actualCash && actualTransfers) && (\n                      <div className=\"bg-gray-50 dark:bg-gray-950 p-4 rounded-lg\">\n                        <h4 className=\"font-semibold mb-3\">Diferencias</h4>\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-muted-foreground\">Diferencia Efectivo:</span>\n                            <p className={`font-medium ${(() => {\n                              const cashSales = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'efectivo').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n                              const cashExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.filter(expense => expense.paymentMethod === 'efectivo').reduce((sum, expense) => sum + Number(expense.amount), 0) : 0;\n                              const variance = parseFloat(actualCash) - (cashSales - cashExpenses);\n                              return variance >= 0 ? 'text-green-600' : 'text-red-600';\n                            })()}`}>\n                              ${(() => {\n                                const cashSales = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'efectivo').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n                                const cashExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.filter(expense => expense.paymentMethod === 'efectivo').reduce((sum, expense) => sum + Number(expense.amount), 0) : 0;\n                                return (parseFloat(actualCash) - (cashSales - cashExpenses)).toFixed(2);\n                              })()}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Diferencia Transferencias:</span>\n                            <p className={`font-medium ${(() => {\n                              const transferSales = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'transferencia').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n                              const transferExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.filter(expense => expense.paymentMethod === 'transferencia').reduce((sum, expense) => sum + Number(expense.amount), 0) : 0;\n                              const variance = parseFloat(actualTransfers) - (transferSales - transferExpenses);\n                              return variance >= 0 ? 'text-green-600' : 'text-red-600';\n                            })()}`}>\n                              ${(() => {\n                                const transferSales = Array.isArray(dailySales) ? dailySales.filter(sale => sale.paymentMethod === 'transferencia').reduce((sum, sale) => sum + Number(sale.totalAmount), 0) : 0;\n                                const transferExpenses = Array.isArray(dailyExpenses) ? dailyExpenses.filter(expense => expense.paymentMethod === 'transferencia').reduce((sum, expense) => sum + Number(expense.amount), 0) : 0;\n                                return (parseFloat(actualTransfers) - (transferSales - transferExpenses)).toFixed(2);\n                              })()}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Notes */}\n                    <div>\n                      <Label htmlFor=\"closing-notes\">Notas de ReconciliaciÃ³n (Opcional)</Label>\n                      <textarea\n                        id=\"closing-notes\"\n                        placeholder=\"Observaciones sobre diferencias o incidencias...\"\n                        value={closingNotes}\n                        onChange={(e) => setClosingNotes(e.target.value)}\n                        className=\"w-full mt-1 px-3 py-2 border border-input rounded-md text-sm\"\n                        rows={3}\n                        data-testid=\"textarea-closing-notes\"\n                      />\n                    </div>\n\n                    {/* Final Summary */}\n                    <div className=\"bg-green-50 dark:bg-green-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold mb-2\">Resumen Final del DÃ­a</h4>\n                      <div className=\"text-sm space-y-1\">\n                        <div className=\"flex justify-between\">\n                          <span>Total Ventas:</span>\n                          <span className=\"font-medium\">${netIncome.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Total Gastos:</span>\n                          <span className=\"font-medium\">${totalExpenses.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>CrÃ©dito Otorgado:</span>\n                          <span className=\"font-medium\">${(() => {\n                            return (dailySales as any[]).filter(sale => sale.paymentMethod === 'fiado').reduce((sum, sale) => sum + Number(sale.totalAmount), 0).toFixed(2);\n                          })()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Pagos Recibidos:</span>\n                          <span className=\"font-medium\">${(() => {\n                            return (dailyPayments as any[]).reduce((sum, payment) => sum + Number(payment.amount), 0).toFixed(2);\n                          })()}</span>\n                        </div>\n                        <hr className=\"my-2\" />\n                        <div className=\"flex justify-between text-lg font-bold\">\n                          <span>Balance Neto:</span>\n                          <span className={netBalance >= 0 ? 'text-green-600' : 'text-red-600'}>\n                            ${netBalance.toFixed(2)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-end space-x-3 pt-4\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsCashClosingOpen(false);\n                        setActualCash(\"\");\n                        setActualTransfers(\"\");\n                        setClosingNotes(\"\");\n                      }}\n                      data-testid=\"button-cancel-reconciliation\"\n                    >\n                      Cancelar\n                    </Button>\n                    <Button \n                      onClick={handleCloseCash}\n                      disabled={!actualCash || !actualTransfers}\n                      data-testid=\"button-confirm-reconciliation\"\n                    >\n                      Finalizar ReconciliaciÃ³n\n                    </Button>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Resumen Financiero del DÃ­a */}\n          {isDataLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"animate-pulse\">\n                      <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Ingresos del DÃ­a</p>\n                      <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-daily-income\">\n                        ${netIncome.toFixed(2)}\n                      </p>\n                      <p className=\"text-xs text-green-600 mt-1\">\n                        Solo efectivo y transferencias\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <TrendingUp className=\"h-6 w-6 text-green-600\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Gastos del DÃ­a</p>\n                      <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-daily-expenses\">\n                        ${totalExpenses.toFixed(2)}\n                      </p>\n                      <p className=\"text-xs text-red-600 mt-1\">\n                        {Array.isArray(dailyExpenses) ? dailyExpenses.length : 0} gastos\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                      <TrendingDown className=\"h-6 w-6 text-red-600\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Fiado Otorgado</p>\n                      <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-credit-given\">\n                        ${fiadoSales.toFixed(2)}\n                      </p>\n                      <p className=\"text-xs text-orange-600 mt-1\">\n                        CrÃ©dito otorgado (no es ingreso)\n                      </p>\n                    </div>\n                    <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                      <FileText className=\"h-6 w-6 text-orange-600\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Balance Neto</p>\n                      <p className={`text-2xl font-bold ${\n                        netBalance >= 0 ? 'text-green-600' : 'text-red-600'\n                      }`} data-testid=\"text-net-balance\">\n                        ${netBalance.toFixed(2)}\n                      </p>\n                      <p className={`text-xs mt-1 ${\n                        netBalance >= 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {netBalance >= 0 ? 'Ganancia' : 'PÃ©rdida'}\n                      </p>\n                    </div>\n                    <div className={`w-12 h-12 ${netBalance >= 0 ? 'bg-green-100' : 'bg-red-100'} rounded-lg flex items-center justify-center`}>\n                      <DollarSign className={`h-6 w-6 ${netBalance >= 0 ? 'text-green-600' : 'text-red-600'}`} />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Cierre de Caja */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calculator className=\"h-5 w-5\" />\n                <span>Cierre de Caja - {formattedDate}</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-green-600\">Ingresos Detallados</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">ðµ Ventas en Efectivo:</span>\n                      <span className=\"font-medium\" data-testid=\"text-cash-sales\">${(salesByMethod.efectivo || 0).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">ð³ Ventas por Transferencia:</span>\n                      <span className=\"font-medium\" data-testid=\"text-transfer-sales\">${(salesByMethod.transferencia || 0).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">ð° Cobros en Efectivo:</span>\n                      <span className=\"font-medium\">${cashPayments.toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">ð¦ Cobros por Transferencia:</span>\n                      <span className=\"font-medium\">${transferPayments.toFixed(2)}</span>\n                    </div>\n                    <div className=\"border-t pt-2\">\n                      <div className=\"flex justify-between font-semibold text-green-600\">\n                        <span>Total Ingresos:</span>\n                        <span data-testid=\"text-total-income\">${netIncome.toFixed(2)}</span>\n                      </div>\n                    </div>\n                    <div className=\"bg-green-50 p-2 rounded text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>ðµ Efectivo Total:</span>\n                        <span className=\"font-medium\">${cashIncome.toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>ð³ Transferencia Total:</span>\n                        <span className=\"font-medium\">${transferIncome.toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-red-600\">Egresos Detallados</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">ðµ Gastos en Efectivo:</span>\n                      <span className=\"font-medium\" data-testid=\"text-general-expenses\">${(expensesByMethod.efectivo || 0).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">ð³ Gastos por Transferencia:</span>\n                      <span className=\"font-medium\" data-testid=\"text-supplier-payments\">${(expensesByMethod.transferencia || 0).toFixed(2)}</span>\n                    </div>\n                    <div className=\"border-t pt-2\">\n                      <div className=\"flex justify-between font-semibold text-red-600\">\n                        <span>Total Egresos:</span>\n                        <span data-testid=\"text-total-expenses\">${totalExpenses.toFixed(2)}</span>\n                      </div>\n                    </div>\n                    <div className=\"bg-red-50 p-2 rounded text-sm mt-2\">\n                      <p className=\"text-red-700 font-medium mb-1\">Resumen por MÃ©todo:</p>\n                      <div className=\"flex justify-between\">\n                        <span>ðµ Efectivo gastado:</span>\n                        <span className=\"font-medium\">${(expensesByMethod.efectivo || 0).toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>ð³ Transferencia gastada:</span>\n                        <span className=\"font-medium\">${(expensesByMethod.transferencia || 0).toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className={`mt-6 p-4 rounded-lg ${\n                netBalance >= 0 ? 'bg-green-50' : 'bg-red-50'\n              }`}>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-semibold\">Balance Final del DÃ­a:</span>\n                  <span className={`text-2xl font-bold ${\n                    netBalance >= 0 ? 'text-green-600' : 'text-red-600'\n                  }`} data-testid=\"text-final-balance\">\n                    ${netBalance.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Gastos del DÃ­a */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <TrendingDown className=\"h-5 w-5\" />\n                  <span>Gastos del DÃ­a</span>\n                </div>\n                <Dialog open={isExpenseDialogOpen} onOpenChange={setIsExpenseDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button size=\"sm\" className=\"flex items-center space-x-2\" data-testid=\"button-new-expense\">\n                      <Plus className=\"h-4 w-4\" />\n                      <span>Nuevo Gasto</span>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-[500px]\">\n                    <DialogHeader>\n                      <DialogTitle>Registrar Nuevo Gasto</DialogTitle>\n                      <DialogDescription>\n                        Registra un gasto para la fecha {format(getValidDate(selectedDate), 'dd/MM/yyyy')}\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...expenseForm}>\n                      <form onSubmit={expenseForm.handleSubmit(onExpenseSubmit)} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={expenseForm.control}\n                            name=\"description\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>DescripciÃ³n</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"DescripciÃ³n del gasto\" data-testid=\"input-expense-description\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={expenseForm.control}\n                            name=\"amount\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Monto</FormLabel>\n                                <FormControl>\n                                  <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-expense-amount\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={expenseForm.control}\n                            name=\"category\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>CategorÃ­a</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-expense-category\">\n                                      <SelectValue placeholder=\"Selecciona categorÃ­a\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"mercaderÃ­a\">MercaderÃ­a</SelectItem>\n                                    <SelectItem value=\"servicios\">Servicios</SelectItem>\n                                    <SelectItem value=\"mantenimiento\">Mantenimiento</SelectItem>\n                                    <SelectItem value=\"transporte\">Transporte</SelectItem>\n                                    <SelectItem value=\"personal\">Personal</SelectItem>\n                                    <SelectItem value=\"otros\">Otros</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={expenseForm.control}\n                            name=\"paymentMethod\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>MÃ©todo de Pago</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-expense-payment\">\n                                      <SelectValue placeholder=\"MÃ©todo de pago\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"efectivo\">ðµ Efectivo</SelectItem>\n                                    <SelectItem value=\"transferencia\">ð³ Transferencia</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={expenseForm.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Notas (opcional)</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"Notas adicionales...\" data-testid=\"input-expense-notes\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"flex justify-end space-x-2\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setIsExpenseDialogOpen(false)}\n                            data-testid=\"button-cancel-expense\"\n                          >\n                            Cancelar\n                          </Button>\n                          <Button \n                            type=\"submit\" \n                            disabled={createExpenseMutation.isPending}\n                            data-testid=\"button-save-expense\"\n                          >\n                            {createExpenseMutation.isPending ? \"Guardando...\" : \"Guardar Gasto\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isDataLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n                  <span className=\"ml-2 text-muted-foreground\">Cargando gastos...</span>\n                </div>\n              ) : Array.isArray(dailyExpenses) && dailyExpenses.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {dailyExpenses.map((expense: any) => (\n                    <div key={expense.id} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Receipt className=\"h-4 w-4 text-red-600\" />\n                            <span className=\"font-medium\">{expense.description}</span>\n                            <Badge variant=\"destructive\">${expense.amount}</Badge>\n                          </div>\n                          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                            <Badge variant=\"secondary\">{expense.category}</Badge>\n                            <span>\n                              {expense.paymentMethod === 'efectivo' ? 'ðµ Efectivo' : 'ð³ Transferencia'}\n                            </span>\n                            {expense.createdAt && (\n                              <span>{format(new Date(expense.createdAt), 'HH:mm', { locale: es })}</span>\n                            )}\n                          </div>\n                          {expense.notes && (\n                            <p className=\"text-sm text-muted-foreground mt-1\">{expense.notes}</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <div className=\"flex justify-between items-center text-lg font-semibold\">\n                      <span>Total de gastos del dÃ­a:</span>\n                      <span className=\"text-red-600\">${totalExpenses.toFixed(2)}</span>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <TrendingDown className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No hay gastos registrados para esta fecha.</p>\n                  <p className=\"text-sm\">Utiliza el botÃ³n superior para agregar gastos.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":47075},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShoppingCart, TrendingUp, Users, Smartphone } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-bold text-lg\">\n                R&M\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">Sistema Central R&M</h1>\n                <p className=\"text-sm text-muted-foreground\">R&M Store - CÃ³rdoba, Argentina</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => window.location.href = \"/api/login\"}\n              size=\"lg\"\n              data-testid=\"button-login\"\n            >\n              Iniciar SesiÃ³n\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-4xl font-bold text-foreground mb-6\">\n              GestiÃ³n Integral para Tu Negocio\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8\">\n              El sistema completo para administrar ventas, inventario, clientes y finanzas de tu kiosco. \n              Con API segura para tu asistente mÃ³vil y anÃ¡lisis inteligentes.\n            </p>\n            <Button \n              size=\"lg\" \n              className=\"text-lg px-8 py-4\"\n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-get-started\"\n            >\n              Comenzar Ahora\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <h3 className=\"text-3xl font-bold text-center text-foreground mb-12\">\n            Funcionalidades Principales\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <Card>\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                  <ShoppingCart className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <CardTitle>GestiÃ³n de Ventas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Carga rÃ¡pida de ventas con control automÃ¡tico de stock y soporte para fiados.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4\">\n                  <TrendingUp className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <CardTitle>Control de Inventario</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  GestiÃ³n completa de productos con alertas inteligentes de stock bajo.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Users className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <CardTitle>Cuentas Corrientes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  AdministraciÃ³n de clientes y fiados con libreta virtual y seguimiento de pagos.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mb-4\">\n                  <Smartphone className=\"h-6 w-6 text-orange-600\" />\n                </div>\n                <CardTitle>API MÃ³vil</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  API segura para integraciÃ³n con asistente mÃ³vil y consultas en tiempo real.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-8\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-bold\">\n              R&M\n            </div>\n            <span className=\"text-lg font-semibold\">Sistema Central R&M</span>\n          </div>\n          <p className=\"text-gray-400\">\n            Desarrollado especialmente para R&M Store, CÃ³rdoba, Argentina\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5528},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Package, Plus, Search, Edit, Trash2, AlertTriangle } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst productSchema = z.object({\n  name: z.string().min(1, \"El nombre es requerido\"),\n  barcode: z.string().optional(),\n  category: z.string().min(1, \"La categorÃ­a es requerida\"),\n  costPrice: z.string().min(1, \"El precio de compra es requerido\"),\n  salePrice: z.string().min(1, \"El precio de venta es requerido\"),\n  currentStock: z.string().min(1, \"El stock actual es requerido\"),\n  minStock: z.string().min(1, \"El stock mÃ­nimo es requerido\"),\n});\n\ntype ProductFormData = z.infer<typeof productSchema>;\n\n// Product Filters Dialog Component\nfunction ProductFiltersDialog({ \n  filters, \n  onFiltersChange, \n  onClose \n}: { \n  filters: any; \n  onFiltersChange: (filters: any) => void; \n  onClose: () => void; \n}) {\n  const handleFilterChange = (key: string, value: any) => {\n    onFiltersChange({ ...filters, [key]: value });\n  };\n\n  const clearAllFilters = () => {\n    onFiltersChange({\n      category: \"\",\n      minPrice: \"\",\n      maxPrice: \"\",\n      stockLevel: \"\",\n      showLowStockOnly: false\n    });\n  };\n\n  const hasActiveFilters = Object.values(filters).some(v => v !== \"\" && v !== false);\n\n  return (\n    <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-product-filters\">\n      <DialogHeader>\n        <DialogTitle>Filtros de Productos</DialogTitle>\n        <DialogDescription>\n          Filtra los productos por categorÃ­a, precio, y nivel de stock\n        </DialogDescription>\n      </DialogHeader>\n      \n      <div className=\"space-y-4\">\n        {/* Category Filter */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"category-filter\">CategorÃ­a</Label>\n          <Input\n            id=\"category-filter\"\n            placeholder=\"Ej: Bebidas, Golosinas...\"\n            value={filters.category}\n            onChange={(e) => handleFilterChange(\"category\", e.target.value)}\n            data-testid=\"input-filter-category\"\n          />\n        </div>\n\n        {/* Price Range Filter */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"min-price\">Precio MÃ­nimo</Label>\n            <Input\n              id=\"min-price\"\n              type=\"number\"\n              placeholder=\"0.00\"\n              value={filters.minPrice}\n              onChange={(e) => handleFilterChange(\"minPrice\", e.target.value)}\n              data-testid=\"input-filter-min-price\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"max-price\">Precio MÃ¡ximo</Label>\n            <Input\n              id=\"max-price\"\n              type=\"number\"\n              placeholder=\"999.99\"\n              value={filters.maxPrice}\n              onChange={(e) => handleFilterChange(\"maxPrice\", e.target.value)}\n              data-testid=\"input-filter-max-price\"\n            />\n          </div>\n        </div>\n\n        {/* Stock Level Filter */}\n        <div className=\"space-y-2\">\n          <Label>Nivel de Stock</Label>\n          <Select\n            value={filters.stockLevel}\n            onValueChange={(value) => handleFilterChange(\"stockLevel\", value)}\n          >\n            <SelectTrigger data-testid=\"select-stock-level\">\n              <SelectValue placeholder=\"Todos los niveles\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Todos los niveles</SelectItem>\n              <SelectItem value=\"low\">Stock Bajo (â¤ mÃ­nimo)</SelectItem>\n              <SelectItem value=\"normal\">Stock Normal</SelectItem>\n              <SelectItem value=\"high\">Stock Alto</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Low Stock Only Toggle */}\n        <div className=\"flex items-center space-x-2\">\n          <input\n            type=\"checkbox\"\n            id=\"low-stock-only\"\n            checked={filters.showLowStockOnly}\n            onChange={(e) => handleFilterChange(\"showLowStockOnly\", e.target.checked)}\n            className=\"rounded border-gray-300\"\n            data-testid=\"checkbox-low-stock-only\"\n          />\n          <Label htmlFor=\"low-stock-only\" className=\"text-sm\">\n            Mostrar solo productos con stock bajo\n          </Label>\n        </div>\n      </div>\n\n      <div className=\"flex justify-between pt-4\">\n        <Button \n          variant=\"outline\" \n          onClick={clearAllFilters}\n          disabled={!hasActiveFilters}\n          data-testid=\"button-clear-filters\"\n        >\n          Limpiar Filtros\n        </Button>\n        <div className=\"space-x-2\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose}\n            data-testid=\"button-cancel-filters\"\n          >\n            Cancelar\n          </Button>\n          <Button \n            onClick={onClose}\n            data-testid=\"button-apply-filters\"\n          >\n            Aplicar Filtros\n          </Button>\n        </div>\n      </div>\n    </DialogContent>\n  );\n}\n\nexport default function Products() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isFilterDialogOpen, setIsFilterDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n  const [filters, setFilters] = useState({\n    category: \"\",\n    minPrice: \"\",\n    maxPrice: \"\",\n    stockLevel: \"all\", // all, low, normal, high\n    showLowStockOnly: false\n  });\n\n  // Load products\n  const { data: products, isLoading: productsLoading, error: productsError } = useQuery({\n    queryKey: [\"/api/products\"],\n    enabled: isAuthenticated,\n  });\n\n  // Load low stock products\n  const { data: lowStockProducts, isLoading: lowStockLoading } = useQuery({\n    queryKey: [\"/api/dashboard/low-stock\"],\n    enabled: isAuthenticated,\n  });\n\n  const filteredProducts = products ? (products as any[]).filter((product: any) => {\n    // Basic search filter\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (product.barcode && product.barcode.includes(searchTerm));\n    \n    // Category filter\n    const matchesCategory = !filters.category || \n      (product.category && product.category.toLowerCase().includes(filters.category.toLowerCase()));\n    \n    // Price range filter\n    const salePrice = parseFloat(product.salePrice);\n    const matchesMinPrice = !filters.minPrice || salePrice >= parseFloat(filters.minPrice);\n    const matchesMaxPrice = !filters.maxPrice || salePrice <= parseFloat(filters.maxPrice);\n    \n    // Stock level filter\n    const currentStock = parseInt(product.currentStock);\n    const minStock = parseInt(product.minStock);\n    let matchesStockLevel = true;\n    \n    if (filters.stockLevel === \"low\") {\n      matchesStockLevel = currentStock <= minStock;\n    } else if (filters.stockLevel === \"normal\") {\n      matchesStockLevel = currentStock > minStock && currentStock <= minStock * 2;\n    } else if (filters.stockLevel === \"high\") {\n      matchesStockLevel = currentStock > minStock * 2;\n    } else if (filters.stockLevel === \"all\" || !filters.stockLevel) {\n      matchesStockLevel = true;\n    }\n    \n    // Low stock only filter\n    const matchesLowStockOnly = !filters.showLowStockOnly || currentStock <= minStock;\n    \n    return matchesSearch && matchesCategory && matchesMinPrice && \n           matchesMaxPrice && matchesStockLevel && matchesLowStockOnly;\n  }) : [];\n\n  // Mutations for product management\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      return await apiRequest(\"DELETE\", `/api/products/${productId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Producto eliminado\",\n        description: \"El producto se ha eliminado exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/low-stock\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Error al eliminar el producto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handler functions\n  const handleEdit = (product: any) => {\n    setEditingProduct(product);\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (productId: string) => {\n    if (confirm('Â¿EstÃ¡s seguro de que deseas eliminar este producto?')) {\n      deleteProductMutation.mutate(productId);\n    }\n  };\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"No autorizado\",\n        description: \"Debes iniciar sesiÃ³n para acceder al sistema.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"border-b bg-card p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">GestiÃ³n de Productos</h2>\n              <p className=\"text-muted-foreground\">Administra tu inventario y control de stock</p>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"flex items-center space-x-2\" data-testid=\"button-new-product\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Nuevo Producto</span>\n                </Button>\n              </DialogTrigger>\n              <ProductFormDialog \n                editingProduct={editingProduct} \n                onClose={() => {\n                  setIsDialogOpen(false);\n                  setEditingProduct(null);\n                }} \n              />\n            </Dialog>\n          </div>\n        </div>\n        \n        <div className=\"p-6 space-y-6\">\n          {/* BÃºsqueda y Filtros */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-muted-foreground\" />\n                  <Input \n                    placeholder=\"Buscar productos por nombre o cÃ³digo...\" \n                    className=\"pl-10\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    data-testid=\"input-search-products\"\n                  />\n                </div>\n                <Dialog open={isFilterDialogOpen} onOpenChange={setIsFilterDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" data-testid=\"button-filter\">\n                      Filtros {Object.values(filters).some(v => v !== \"\" && v !== false) && (\n                        <span className=\"ml-1 px-1.5 py-0.5 text-xs bg-primary text-primary-foreground rounded-full\">\n                          {Object.values(filters).filter(v => v !== \"\" && v !== false).length}\n                        </span>\n                      )}\n                    </Button>\n                  </DialogTrigger>\n                  <ProductFiltersDialog \n                    filters={filters}\n                    onFiltersChange={setFilters}\n                    onClose={() => setIsFilterDialogOpen(false)}\n                  />\n                </Dialog>\n                <Button variant=\"outline\" data-testid=\"button-import\">\n                  Importar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Alertas de Stock */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-orange-600\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                <span>Productos con Stock Bajo</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {lowStockLoading ? (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    <Package className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">Cargando alertas de stock...</p>\n                  </div>\n                ) : lowStockProducts && (lowStockProducts as any[]).length > 0 ? (\n                  (lowStockProducts as any[]).map((product: any) => (\n                    <div key={product.id} className=\"flex items-center justify-between p-3 bg-orange-50 dark:bg-orange-950 rounded-lg border border-orange-200 dark:border-orange-800\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{product.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">Stock: {product.currentStock} (MÃ­nimo: {product.minStock})</p>\n                      </div>\n                      <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    <Package className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No hay productos con stock bajo.</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Lista de Productos */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Package className=\"h-5 w-5\" />\n                <span>Todos los Productos</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {productsLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Package className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>Cargando productos...</p>\n                  </div>\n                ) : productsError ? (\n                  <div className=\"text-center py-8 text-red-500\">\n                    <Package className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>Error al cargar productos</p>\n                    <p className=\"text-sm\">{String(productsError)}</p>\n                  </div>\n                ) : !filteredProducts.length ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Package className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No hay productos registrados aÃºn.</p>\n                    <p className=\"text-sm\">Comienza agregando tu primer producto.</p>\n                    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button className=\"mt-4\" data-testid=\"button-add-first-product\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Agregar Primer Producto\n                        </Button>\n                      </DialogTrigger>\n                      <ProductFormDialog \n                        editingProduct={editingProduct} \n                        onClose={() => {\n                          setIsDialogOpen(false);\n                          setEditingProduct(null);\n                        }} \n                      />\n                    </Dialog>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredProducts.map((product: any) => (\n                      <div key={product.id} className=\"border rounded-lg p-4\" data-testid={`product-item-${product.id}`}>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-medium text-sm\" data-testid={`product-name-${product.id}`}>{product.name}</h3>\n                            <div className=\"text-xs text-muted-foreground space-y-1 mt-1\">\n                              {product.barcode && (\n                                <p data-testid={`product-barcode-${product.id}`}>CÃ³digo: {product.barcode}</p>\n                              )}\n                              <p data-testid={`product-stock-${product.id}`}>Stock: {product.currentStock}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-medium text-sm\" data-testid={`product-price-${product.id}`}>${product.salePrice}</p>\n                            <p className=\"text-xs text-muted-foreground\">Costo: ${product.costPrice || 'N/A'}</p>\n                          </div>\n                          <div className=\"ml-4 flex space-x-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => handleEdit(product)}\n                              data-testid={`button-edit-product-${product.id}`}\n                            >\n                              <Edit className=\"h-3 w-3\" />\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => handleDelete(product.id)}\n                              data-testid={`button-delete-product-${product.id}`}\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction ProductFormDialog({ editingProduct, onClose }: { editingProduct?: any; onClose: () => void }) {\n  const { toast } = useToast();\n  \n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: editingProduct?.name || \"\",\n      barcode: editingProduct?.barcode || \"\",\n      category: editingProduct?.category || \"\",\n      costPrice: editingProduct?.costPrice?.toString() || \"\",\n      salePrice: editingProduct?.salePrice?.toString() || \"\",\n      currentStock: editingProduct?.currentStock?.toString() || \"\",\n      minStock: editingProduct?.minStock?.toString() || \"\",\n    },\n  });\n\n  // Update form when editingProduct changes\n  useEffect(() => {\n    if (editingProduct) {\n      form.reset({\n        name: editingProduct.name || \"\",\n        barcode: editingProduct.barcode || \"\",\n        category: editingProduct.category || \"\",\n        costPrice: editingProduct.costPrice?.toString() || \"\",\n        salePrice: editingProduct.salePrice?.toString() || \"\",\n        currentStock: editingProduct.currentStock?.toString() || \"\",\n        minStock: editingProduct.minStock?.toString() || \"\",\n      });\n    } else {\n      form.reset({\n        name: \"\",\n        barcode: \"\",\n        category: \"\",\n        costPrice: \"\",\n        salePrice: \"\",\n        currentStock: \"\",\n        minStock: \"\",\n      });\n    }\n  }, [editingProduct, form]);\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      return await apiRequest(\"POST\", \"/api/products\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Producto creado\",\n        description: \"El producto se ha creado exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/low-stock\"] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al crear el producto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      return await apiRequest(\"PUT\", `/api/products/${editingProduct.id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Producto actualizado\",\n        description: \"El producto se ha actualizado exitosamente.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/low-stock\"] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Error al actualizar el producto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    console.log(\"Form data submitted:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    \n    // Transform the data to match backend schema\n    const transformedData = {\n      name: data.name,\n      barcode: data.barcode || undefined,\n      category: data.category,\n      costPrice: data.costPrice,\n      salePrice: data.salePrice,\n      currentStock: data.currentStock,\n      minStock: data.minStock,\n    };\n    \n    console.log(\"Transformed data:\", transformedData);\n    \n    if (editingProduct) {\n      updateProductMutation.mutate(transformedData);\n    } else {\n      createProductMutation.mutate(transformedData);\n    }\n  };\n\n  return (\n    <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-product-form\">\n      <DialogHeader>\n        <DialogTitle>{editingProduct ? 'Editar Producto' : 'Nuevo Producto'}</DialogTitle>\n        <DialogDescription>\n          {editingProduct ? 'Actualiza la informaciÃ³n del producto.' : 'Completa la informaciÃ³n del producto para agregarlo al inventario.'}\n        </DialogDescription>\n      </DialogHeader>\n      \n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Nombre del Producto</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"Ej: Coca Cola 500ml\" \n                    data-testid=\"input-product-name\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"barcode\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>CÃ³digo de Barras (Opcional)</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"Ej: 7790001234567\" \n                    data-testid=\"input-product-barcode\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"category\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>CategorÃ­a</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"Ej: Bebidas, Golosinas, etc.\" \n                    data-testid=\"input-product-category\"\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"costPrice\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Precio de Compra</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"150.00\" \n                      data-testid=\"input-product-cost-price\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"salePrice\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Precio de Venta</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"200.00\" \n                      data-testid=\"input-product-sale-price\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"currentStock\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Stock Actual</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"20\" \n                      data-testid=\"input-product-current-stock\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"minStock\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Stock MÃ­nimo</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"5\" \n                      data-testid=\"input-product-min-stock\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose}\n              data-testid=\"button-cancel-product\"\n            >\n              Cancelar\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createProductMutation.isPending || updateProductMutation.isPending}\n              data-testid=\"button-save-product\"\n            >\n              {(createProductMutation.isPending || updateProductMutation.isPending) \n                ? \"Guardando...\" \n                : editingProduct \n                  ? \"Actualizar Producto\" \n                  : \"Guardar Producto\"\n              }\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </DialogContent>\n  );\n}\n","size_bytes":28445},"client/src/pages/suppliers.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Truck, Plus, Search, Phone, Mail, MapPin, Edit2, Trash2, User, Package } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertSupplierSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport type { Supplier, PurchaseSuggestion } from \"@shared/schema\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ntype SupplierFormData = z.infer<typeof insertSupplierSchema>;\n\nexport default function Suppliers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingSupplier, setEditingSupplier] = useState<Supplier | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Form setup\n  const form = useForm<SupplierFormData>({\n    resolver: zodResolver(insertSupplierSchema),\n    defaultValues: {\n      name: \"\",\n      contactPerson: \"\",\n      phone: \"\",\n      email: \"\",\n      address: \"\",\n      notes: \"\"\n    }\n  });\n\n  // Queries\n  const { data: suppliers = [], isLoading: loadingSuppliers } = useQuery<Supplier[]>({\n    queryKey: ['/api/suppliers'],\n    enabled: isAuthenticated\n  });\n\n  const { data: purchaseSuggestions = [], isLoading: loadingSuggestions } = useQuery<PurchaseSuggestion[]>({\n    queryKey: ['/api/purchase-suggestions'],\n    enabled: isAuthenticated\n  });\n\n  // Mutations\n  const createSupplierMutation = useMutation({\n    mutationFn: async (data: SupplierFormData) => {\n      return await apiRequest('POST', '/api/suppliers', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Proveedor creado\", description: \"El proveedor se creÃ³ correctamente\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/suppliers'] });\n      setIsDialogOpen(false);\n      form.reset();\n      setEditingSupplier(null);\n    },\n    onError: (error) => {\n      toast({ \n        title: \"Error\", \n        description: \"No se pudo crear el proveedor\", \n        variant: \"destructive\" \n      });\n      console.error('Error creating supplier:', error);\n    }\n  });\n\n  const updateSupplierMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<SupplierFormData> }) => {\n      return await apiRequest('PUT', `/api/suppliers/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Proveedor actualizado\", description: \"Los cambios se guardaron correctamente\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/suppliers'] });\n      setIsDialogOpen(false);\n      form.reset();\n      setEditingSupplier(null);\n    },\n    onError: (error) => {\n      toast({ \n        title: \"Error\", \n        description: \"No se pudo actualizar el proveedor\", \n        variant: \"destructive\" \n      });\n      console.error('Error updating supplier:', error);\n    }\n  });\n\n  const deleteSupplierMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/suppliers/${id}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Proveedor eliminado\", description: \"El proveedor se eliminÃ³ correctamente\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/suppliers'] });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"Error\", \n        description: \"No se pudo eliminar el proveedor\", \n        variant: \"destructive\" \n      });\n      console.error('Error deleting supplier:', error);\n    }\n  });\n\n  // Event handlers\n  const handleOpenDialog = (supplier?: Supplier) => {\n    if (supplier) {\n      setEditingSupplier(supplier);\n      form.reset({\n        name: supplier.name,\n        contactPerson: supplier.contactPerson ?? \"\",\n        phone: supplier.phone ?? \"\",\n        email: supplier.email ?? \"\",\n        address: supplier.address ?? \"\",\n        notes: supplier.notes ?? \"\"\n      });\n    } else {\n      setEditingSupplier(null);\n      form.reset();\n    }\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingSupplier(null);\n    form.reset();\n  };\n\n  const onSubmit = (data: SupplierFormData) => {\n    if (editingSupplier) {\n      updateSupplierMutation.mutate({ id: editingSupplier.id, data });\n    } else {\n      createSupplierMutation.mutate(data);\n    }\n  };\n\n  const handleDeleteSupplier = (id: string) => {\n    if (confirm('Â¿EstÃ¡s seguro de que quieres eliminar este proveedor?')) {\n      deleteSupplierMutation.mutate(id);\n    }\n  };\n\n  // Filter suppliers based on search term\n  const filteredSuppliers = suppliers.filter((supplier: Supplier) => \n    supplier.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (supplier.contactPerson && supplier.contactPerson.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  // Reset form when dialog closes\n  useEffect(() => {\n    if (!isDialogOpen) {\n      form.reset();\n      setEditingSupplier(null);\n    }\n  }, [isDialogOpen, form]);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"No autorizado\",\n        description: \"Debes iniciar sesiÃ³n para acceder al sistema.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"border-b bg-card p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">GestiÃ³n de Proveedores</h2>\n              <p className=\"text-muted-foreground\">Administra contactos y pedidos ({suppliers.length} proveedores)</p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"outline\" \n                className=\"flex items-center space-x-2\" \n                data-testid=\"button-generate-orders\"\n                disabled={purchaseSuggestions.length === 0}\n              >\n                <Truck className=\"h-4 w-4\" />\n                <span>Lista de Compras ({purchaseSuggestions.length})</span>\n              </Button>\n              <Button \n                className=\"flex items-center space-x-2\" \n                data-testid=\"button-new-supplier\"\n                onClick={() => handleOpenDialog()}\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Nuevo Proveedor</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"p-6 space-y-6\">\n          {/* BÃºsqueda */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input \n                  placeholder=\"Buscar proveedores por nombre o contacto...\" \n                  className=\"pl-10\"\n                  data-testid=\"input-search-suppliers\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Lista Sugerida de Compras */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-orange-600\">\n                <Truck className=\"h-5 w-5\" />\n                <span>Lista Sugerida de Compras</span>\n                {purchaseSuggestions.length > 0 && (\n                  <Badge variant=\"outline\" className=\"ml-2\">{purchaseSuggestions.length} productos</Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingSuggestions ? (\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                  <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                </div>\n              ) : purchaseSuggestions.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {purchaseSuggestions.map((suggestion) => (\n                    <div key={suggestion.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Package className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"font-medium\">{suggestion.name}</span>\n                          <Badge variant={suggestion.priority === 'urgent' ? 'destructive' : 'secondary'}>\n                            {suggestion.priority === 'urgent' ? 'Urgente' : 'Normal'}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          Stock actual: {suggestion.currentStock} | MÃ­nimo: {suggestion.minStock} | Sugerir: {suggestion.suggestedQuantity}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Truck className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No hay productos que necesiten reposiciÃ³n.</p>\n                  <p className=\"text-sm\">Las sugerencias aparecerÃ¡n basadas en el stock bajo.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Directorio de Proveedores */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Truck className=\"h-5 w-5\" />\n                <span>Directorio de Proveedores</span>\n                {filteredSuppliers.length > 0 && (\n                  <Badge variant=\"outline\" className=\"ml-2\">{filteredSuppliers.length} proveedores</Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingSuppliers ? (\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 3 }).map((_, i) => (\n                    <div key={i} className=\"p-4 border rounded-lg\">\n                      <div className=\"h-4 bg-muted rounded animate-pulse mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded animate-pulse\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : filteredSuppliers.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {filteredSuppliers.map((supplier) => (\n                    <div key={supplier.id} className=\"p-4 border rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <User className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"font-semibold\">{supplier.name}</span>\n                          </div>\n                          {supplier.contactPerson && (\n                            <p className=\"text-sm text-muted-foreground mb-1\">Contacto: {supplier.contactPerson}</p>\n                          )}\n                          <div className=\"flex flex-wrap gap-3 text-sm text-muted-foreground\">\n                            {supplier.phone && (\n                              <div className=\"flex items-center space-x-1\">\n                                <Phone className=\"h-3 w-3\" />\n                                <span>{supplier.phone}</span>\n                              </div>\n                            )}\n                            {supplier.email && (\n                              <div className=\"flex items-center space-x-1\">\n                                <Mail className=\"h-3 w-3\" />\n                                <span>{supplier.email}</span>\n                              </div>\n                            )}\n                            {supplier.address && (\n                              <div className=\"flex items-center space-x-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                <span>{supplier.address}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleOpenDialog(supplier)}\n                            data-testid={`button-edit-supplier-${supplier.id}`}\n                          >\n                            <Edit2 className=\"h-3 w-3\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleDeleteSupplier(supplier.id)}\n                            data-testid={`button-delete-supplier-${supplier.id}`}\n                            disabled={deleteSupplierMutation.isPending}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Truck className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No hay proveedores registrados aÃºn.</p>\n                  <p className=\"text-sm\">Comienza agregando tu primer proveedor.</p>\n                  <Button \n                    className=\"mt-4\" \n                    data-testid=\"button-add-first-supplier\"\n                    onClick={() => handleOpenDialog()}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Agregar Primer Proveedor\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      \n      {/* Supplier Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={handleCloseDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingSupplier ? \"Editar Proveedor\" : \"Nuevo Proveedor\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingSupplier ? \"Actualiza la informaciÃ³n del proveedor.\" : \"Agrega un nuevo proveedor al sistema.\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nombre del Proveedor *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ej: Distribuidora XYZ\"\n                        data-testid=\"input-supplier-name\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"contactPerson\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Persona de Contacto</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ej: Juan GonzÃ¡lez\"\n                        data-testid=\"input-contact-person\"\n                        value={field.value ?? ''}\n                        onChange={(e) => field.onChange(e.target.value)}\n                        onBlur={field.onBlur}\n                        name={field.name}\n                        ref={field.ref}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>TelÃ©fono</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Ej: +54 351 123-4567\"\n                          data-testid=\"input-supplier-phone\"\n                          value={field.value ?? ''}\n                          onChange={(e) => field.onChange(e.target.value)}\n                          onBlur={field.onBlur}\n                          name={field.name}\n                          ref={field.ref}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\"\n                          placeholder=\"Ej: contacto@proveedor.com\"\n                          data-testid=\"input-supplier-email\"\n                          value={field.value ?? ''}\n                          onChange={(e) => field.onChange(e.target.value)}\n                          onBlur={field.onBlur}\n                          name={field.name}\n                          ref={field.ref}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>DirecciÃ³n</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ej: Av. ColÃ³n 123, CÃ³rdoba\"\n                        data-testid=\"input-supplier-address\"\n                        value={field.value ?? ''}\n                        onChange={(e) => field.onChange(e.target.value)}\n                        onBlur={field.onBlur}\n                        name={field.name}\n                        ref={field.ref}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notas</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Notas adicionales sobre el proveedor...\"\n                        data-testid=\"input-supplier-notes\"\n                        value={field.value ?? ''}\n                        onChange={(e) => field.onChange(e.target.value)}\n                        onBlur={field.onBlur}\n                        name={field.name}\n                        ref={field.ref}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={handleCloseDialog}\n                  data-testid=\"button-cancel-supplier\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={createSupplierMutation.isPending || updateSupplierMutation.isPending}\n                  data-testid=\"button-save-supplier\"\n                >\n                  {(createSupplierMutation.isPending || updateSupplierMutation.isPending) ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n                      <span>Guardando...</span>\n                    </div>\n                  ) : (\n                    editingSupplier ? \"Actualizar Proveedor\" : \"Crear Proveedor\"\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":22278},"client/src/components/dashboard/ai-summary.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AiSummaryProps {\n  date?: string;\n}\n\nexport default function AiSummary({ date }: AiSummaryProps) {\n  // AiSummary shows weekly summary, not daily, so date is not used currently\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <span className=\"material-icons text-primary\">psychology</span>\n          <span>Resumen Inteligente de la Semana</span>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"space-y-3 text-sm\">\n            <p className=\"text-foreground\">\n              <strong>ð Resumen de la semana:</strong> Tus productos estrella fueron <strong>Coca Cola 500ml</strong> y <strong>Pan Lactal</strong>. \n              La ganancia estimada fue de <strong>$245,670</strong>, un <span className=\"text-green-600 font-medium\">15% mÃ¡s</span> que la semana pasada.\n            </p>\n            \n            <p className=\"text-foreground\">\n              <strong>ð¯ Dato curioso:</strong> NotÃ© que la venta de helados aumenta significativamente los viernes por la tarde. \n              Te sugiero tener mÃ¡s stock para el prÃ³ximo fin de semana.\n            </p>\n            \n            <p className=\"text-foreground\">\n              <strong>ð° Fiados:</strong> MarÃ­a GonzÃ¡lez y Juan RodrÃ­guez representan el 45% de tu cartera de fiados. \n              Considera un seguimiento mÃ¡s frecuente con estos clientes.\n            </p>\n          </div>\n          \n          <div className=\"mt-4 flex space-x-3\">\n            <Button \n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-full-analysis\"\n            >\n              <span className=\"material-icons text-sm\">trending_up</span>\n              <span>Ver AnÃ¡lisis Completo</span>\n            </Button>\n            <Button \n              variant=\"outline\"\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-generate-shopping-list\"\n            >\n              <span className=\"material-icons text-sm\">local_shipping</span>\n              <span>Generar Lista de Compras</span>\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2455},"client/src/components/dashboard/api-status.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, formatDistanceToNow } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\ninterface ApiStatusProps {\n  date?: string;\n}\n\nexport default function ApiStatus({ date }: ApiStatusProps) {\n  const today = date || format(new Date(), 'yyyy-MM-dd');\n  \n  const { data: summary, isLoading: summaryLoading } = useQuery({\n    queryKey: ['/api/dashboard/summary', today],\n    retry: false,\n  });\n\n  // Get API keys to find last usage\n  const { data: apiKeys, isLoading: apiKeysLoading } = useQuery({\n    queryKey: ['/api/api-keys'],\n    retry: false,\n  });\n\n  const isLoading = summaryLoading || apiKeysLoading;\n\n  const apiSalesCount = (summary as any)?.apiSalesCount || 0;\n  \n  // Find most recent API usage\n  const getLastSyncText = () => {\n    if (!apiKeys || !(apiKeys as any[]).length) {\n      return \"API no configurada\";\n    }\n    \n    const activeKey = (apiKeys as any[]).find((key: any) => key.isActive && key.lastUsed);\n    if (!activeKey?.lastUsed) {\n      return \"sin sincronizaciÃ³n\";\n    }\n    \n    try {\n      return formatDistanceToNow(new Date(activeKey.lastUsed), { \n        addSuffix: true, \n        locale: es \n      });\n    } catch {\n      return \"fecha invÃ¡lida\";\n    }\n  };\n  \n  const lastSync = getLastSyncText();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <span className=\"material-icons text-primary\">api</span>\n          <span>Estado del Asistente MÃ³vil</span>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-muted rounded-lg p-4 animate-pulse\">\n                <div className=\"h-4 bg-background rounded w-3/4 mb-2\"></div>\n                <div className=\"h-6 bg-background rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <span className=\"w-3 h-3 bg-green-500 rounded-full\"></span>\n              <span className=\"font-medium text-green-800\">API Conectada</span>\n            </div>\n            <p className=\"text-sm text-green-600\" data-testid=\"text-last-sync\">\n              Ãltima sincronizaciÃ³n: {lastSync}\n            </p>\n          </div>\n          \n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <span className=\"material-icons text-blue-600 text-lg\">sync</span>\n              <span className=\"font-medium text-blue-800\">Ventas Hoy via API</span>\n            </div>\n            <p className=\"text-lg font-bold text-blue-800\" data-testid=\"text-api-sales-today\">\n              {apiSalesCount} ventas\n            </p>\n          </div>\n          \n          <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <span className=\"material-icons text-purple-600 text-lg\">smartphone</span>\n              <span className=\"font-medium text-purple-800\">Consultas de Stock</span>\n            </div>\n            <p className=\"text-lg font-bold text-purple-800\" data-testid=\"text-stock-queries\">\n              {apiKeys && (apiKeys as any[]).some((k: any) => k.isActive && k.lastUsed) ? \"consultas activas\" : \"sin consultas\"}\n            </p>\n          </div>\n          </div>\n        )}\n        \n        <div className=\"mt-4\">\n          <Button \n            variant=\"outline\"\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-configure-api\"\n          >\n            <span className=\"material-icons text-sm\">settings</span>\n            <span>Configurar API</span>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4208},"client/src/components/dashboard/daily-sales.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { useLocation } from \"wouter\";\n\ninterface DailySalesProps {\n  date?: string;\n}\n\nexport default function DailySales({ date }: DailySalesProps) {\n  const [, navigate] = useLocation();\n  const today = date || format(new Date(), 'yyyy-MM-dd');\n  \n  const { data: salesData, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/recent-sales', today],\n    retry: false,\n  });\n\n  const getPaymentMethodColor = (method: string) => {\n    switch (method) {\n      case 'efectivo':\n        return 'bg-green-500';\n      case 'transferencia':\n        return 'bg-blue-500';\n      case 'fiado':\n        return 'bg-orange-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    return format(new Date(dateString), 'HH:mm');\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <span className=\"material-icons\">shopping_cart</span>\n            <span>Ventas del DÃ­a</span>\n          </CardTitle>\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"text-sales-count\">\n            {(salesData as any[])?.length || 0} ventas\n          </span>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"flex items-center justify-between p-3 bg-muted rounded-lg animate-pulse\">\n                  <div className=\"flex items-center space-x-3 flex-1\">\n                    <div className=\"w-2 h-2 bg-background rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-background rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-background rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                  <div className=\"h-4 bg-background rounded w-16\"></div>\n                </div>\n              ))}\n            </div>\n          ) : salesData && (salesData as any[]).length > 0 ? (\n            (salesData as any[]).map((sale: any) => (\n              <div key={sale.id} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-2 h-2 rounded-full ${getPaymentMethodColor(sale.paymentMethod)}`}></div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">\n                      {sale.saleItems?.map((item: any) => `${item.product?.name} x${item.quantity}`).join(', ') || 'Venta'}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {sale.paymentMethod === 'efectivo' ? 'Efectivo' :\n                       sale.paymentMethod === 'transferencia' ? 'Transferencia' :\n                       `Fiado${sale.customer ? ` (${sale.customer.name})` : ''}`} â¢ {formatTime(sale.createdAt)}\n                    </p>\n                  </div>\n                </div>\n                <span className=\"font-medium text-foreground\">\n                  ${Number(sale.totalAmount).toLocaleString()}\n                </span>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <span className=\"material-icons text-4xl opacity-50 mb-2 block\">shopping_cart</span>\n              <p>No hay ventas registradas hoy.</p>\n              <p className=\"text-sm\">Las ventas aparecerÃ¡n aquÃ­ automÃ¡ticamente.</p>\n            </div>\n          )}\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          className=\"w-full mt-4\"\n          data-testid=\"button-view-all-sales\"\n          onClick={() => navigate(\"/carga-diaria\")}\n        >\n          Ver Todas las Ventas\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4219},"client/src/components/dashboard/quick-sale-form.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function QuickSaleForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedDate, setSelectedDate] = useState(\n    format(new Date(), \"yyyy-MM-dd\"),\n  );\n  const [productSearch, setProductSearch] = useState(\"\");\n  const [customerSearch, setCustomerSearch] = useState(\"\");\n  const [quantity, setQuantity] = useState(\"1\");\n  const [paymentMethod, setPaymentMethod] = useState(\"\");\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\n\n  // Search products\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products/search\", productSearch],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/products/search?q=${encodeURIComponent(productSearch)}`,\n        {\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) {\n        throw new Error(\"Error al buscar productos\");\n      }\n      return response.json();\n    },\n    enabled: productSearch.length > 2,\n    retry: false,\n  });\n\n  // Search customers\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers/search\", customerSearch],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/customers/search?q=${encodeURIComponent(customerSearch)}`,\n        {\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) {\n        throw new Error(\"Error al buscar clientes\");\n      }\n      return response.json();\n    },\n    enabled: customerSearch.length > 2, // Habilitar bÃºsqueda para todos los mÃ©todos de pago\n    retry: false,\n  });\n\n  const createSaleMutation = useMutation({\n    mutationFn: async (saleData: any) => {\n      return await apiRequest(\"POST\", \"/api/sales\", saleData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Venta registrada\",\n        description: \"La venta se registrÃ³ exitosamente.\",\n      });\n      // Reset form\n      setProductSearch(\"\");\n      setCustomerSearch(\"\");\n      setQuantity(\"1\");\n      setPaymentMethod(\"\");\n      setSelectedProduct(null);\n      setSelectedCustomer(null);\n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/summary\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/dashboard/recent-sales\"],\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"No autorizado\",\n          description: \"Tu sesiÃ³n ha expirado. Redirigiendo...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"No se pudo registrar la venta.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    console.log(\"Form submission data:\", {\n      selectedProduct,\n      paymentMethod,\n      quantity,\n      selectedCustomer,\n      productSearch,\n      customerSearch,\n    });\n\n    if (!selectedProduct || !paymentMethod || !quantity) {\n      console.log(\"Validation failed:\", {\n        hasProduct: !!selectedProduct,\n        hasPaymentMethod: !!paymentMethod,\n        hasQuantity: !!quantity,\n      });\n      toast({\n        title: \"Error\",\n        description: \"Por favor completa todos los campos requeridos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (paymentMethod === \"fiado\" && !selectedCustomer) {\n      toast({\n        title: \"Error\",\n        description: \"Para ventas fiadas debes seleccionar un cliente.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const totalAmount = Number(selectedProduct.salePrice) * Number(quantity);\n\n    const saleData = {\n      sale: {\n        saleDate: selectedDate,\n        customerId: selectedCustomer?.id || null, // Incluir cliente en todas las ventas si estÃ¡ presente\n        paymentMethod,\n        totalAmount: totalAmount.toString(),\n        isPaid: paymentMethod !== \"fiado\",\n        entryMethod: \"manual\",\n      },\n      items: [\n        {\n          productId: selectedProduct.id,\n          quantity: quantity,\n          unitPrice: selectedProduct.salePrice,\n          totalPrice: totalAmount.toString(),\n        },\n      ],\n    };\n\n    createSaleMutation.mutate(saleData);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <span className=\"material-icons\">add_shopping_cart</span>\n            <span>Carga RÃ¡pida de Venta</span>\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"material-icons text-muted-foreground\">today</span>\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"w-auto\"\n              data-testid=\"input-sale-date\"\n            />\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"product\">Producto</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"product\"\n                  placeholder=\"Buscar producto...\"\n                  value={productSearch}\n                  onChange={(e) => setProductSearch(e.target.value)}\n                  className=\"pr-10\"\n                  data-testid=\"input-product-search\"\n                />\n                <span className=\"absolute right-3 top-2.5 material-icons text-muted-foreground text-sm\">\n                  search\n                </span>\n              </div>\n              {products && (products as any[]).length > 0 && (\n                <div className=\"mt-1 border border-border rounded-md bg-card max-h-32 overflow-y-auto\">\n                  {(products as any[]).map((product: any) => (\n                    <button\n                      key={product.id}\n                      type=\"button\"\n                      className=\"w-full text-left px-3 py-2 hover:bg-accent text-sm\"\n                      onClick={() => {\n                        setSelectedProduct(product);\n                        setProductSearch(product.name);\n                      }}\n                      data-testid={`option-product-${product.id}`}\n                    >\n                      {product.name} - ${product.salePrice}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n            <div>\n              <Label htmlFor=\"quantity\">Cantidad</Label>\n              <Input\n                id=\"quantity\"\n                type=\"number\"\n                placeholder=\"1\"\n                value={quantity}\n                onChange={(e) => setQuantity(e.target.value)}\n                min=\"1\"\n                data-testid=\"input-quantity\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"payment-method\">MÃ©todo de Pago</Label>\n              <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                <SelectTrigger data-testid=\"select-payment-method\">\n                  <SelectValue placeholder=\"Seleccionar mÃ©todo\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"efectivo\">Efectivo</SelectItem>\n                  <SelectItem value=\"transferencia\">Transferencia</SelectItem>\n                  <SelectItem value=\"fiado\">Fiado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"customer\">\n                Cliente {paymentMethod === \"fiado\" ? <span className=\"text-red-500\">*</span> : <span className=\"text-muted-foreground\">(opcional)</span>}\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"customer\"\n                  placeholder=\"Nombre del cliente...\"\n                  value={customerSearch}\n                  onChange={(e) => setCustomerSearch(e.target.value)}\n                  className=\"pr-10\"\n                  // Campo siempre habilitado para seguimiento de hÃ¡bitos de compra\n                  data-testid=\"input-customer-search\"\n                />\n                <span className=\"absolute right-3 top-2.5 material-icons text-muted-foreground text-sm\">\n                  search\n                </span>\n              </div>\n              {customers && (customers as any[]).length > 0 && (\n                <div className=\"mt-1 border border-border rounded-md bg-card max-h-32 overflow-y-auto\">\n                  {(customers as any[]).map((customer: any) => (\n                    <button\n                      key={customer.id}\n                      type=\"button\"\n                      className=\"w-full text-left px-3 py-2 hover:bg-accent text-sm\"\n                      onClick={() => {\n                        setSelectedCustomer(customer);\n                        setCustomerSearch(customer.name);\n                      }}\n                      data-testid={`option-customer-${customer.id}`}\n                    >\n                      {customer.name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <Button\n              type=\"submit\"\n              className=\"flex-1 flex items-center justify-center space-x-2\"\n              disabled={createSaleMutation.isPending}\n              data-testid=\"button-register-sale\"\n            >\n              <span className=\"material-icons\">add_shopping_cart</span>\n              <span>\n                {createSaleMutation.isPending\n                  ? \"Registrando...\"\n                  : \"Registrar Venta\"}\n              </span>\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"px-6 flex items-center space-x-2\"\n              data-testid=\"button-scan-barcode\"\n            >\n              <span className=\"material-icons\">qr_code_scanner</span>\n              <span>Escanear</span>\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11181},"client/src/components/dashboard/sales-summary.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\n\ninterface SalesSummaryProps {\n  date?: string;\n}\n\nexport default function SalesSummary({ date }: SalesSummaryProps) {\n  const today = date || format(new Date(), 'yyyy-MM-dd');\n  \n  const { data: summary, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/summary', today],\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"pt-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const summaryData = summary as any || {\n    totalSales: 0,\n    creditGiven: 0,\n    debtCollected: 0,\n    salesCount: 0,\n  };\n\n  const balance = (summaryData.totalSales || 0) + (summaryData.debtCollected || 0);\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Ventas del DÃ­a</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-daily-sales\">\n                ${summaryData.totalSales?.toLocaleString() || '0'}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <span className=\"material-icons text-green-600\">trending_up</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-green-600 mt-2\">\n            {summaryData.salesCount || 0} operaciones\n          </p>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Fiado Otorgado</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-credit-given\">\n                ${summaryData.creditGiven?.toLocaleString() || '0'}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n              <span className=\"material-icons text-orange-600\">credit_card</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-2\">Ventas a crÃ©dito</p>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Deudas Cobradas</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-debt-collected\">\n                ${summaryData.debtCollected?.toLocaleString() || '0'}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <span className=\"material-icons text-blue-600\">payments</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-blue-600 mt-2\">Pagos recibidos</p>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Balance del DÃ­a</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-daily-balance\">\n                ${balance?.toLocaleString() || '0'}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <span className=\"material-icons text-green-600\">account_balance_wallet</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-green-600 mt-2\">Ingresos totales</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4295},"client/src/components/dashboard/stock-alerts.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\nexport default function StockAlerts() {\n  const [, navigate] = useLocation();\n  \n  const { data: lowStockProducts, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/low-stock'],\n    retry: false,\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2 text-orange-600\">\n          <span className=\"material-icons\">warning</span>\n          <span>Alertas de Stock</span>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-3\">\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"p-3 bg-muted rounded-lg animate-pulse\">\n                  <div className=\"h-4 bg-background rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-3 bg-background rounded w-1/2\"></div>\n                </div>\n              ))}\n            </div>\n          ) : lowStockProducts && (lowStockProducts as any[]).length > 0 ? (\n            (lowStockProducts as any[]).map((product: any) => {\n              const alertLevel = product.currentStock === 0 ? 'critical' : \n                               product.currentStock <= product.minStock ? 'low' : 'warning';\n              \n              const bgColor = alertLevel === 'critical' ? 'bg-red-50 border-red-200' :\n                             alertLevel === 'low' ? 'bg-orange-50 border-orange-200' :\n                             'bg-yellow-50 border-yellow-200';\n              \n              const textColor = alertLevel === 'critical' ? 'text-red-800' :\n                               alertLevel === 'low' ? 'text-orange-800' :\n                               'text-yellow-800';\n              \n              const iconColor = alertLevel === 'critical' ? 'text-red-600' :\n                               alertLevel === 'low' ? 'text-orange-600' :\n                               'text-yellow-600';\n\n              return (\n                <div key={product.id} className={`p-3 border rounded-lg ${bgColor}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className={`font-medium ${textColor}`}>{product.name}</p>\n                      <p className={`text-sm ${textColor.replace('800', '600')}`}>\n                        {alertLevel === 'critical' ? 'Sin stock' :\n                         alertLevel === 'low' ? `Stock crÃ­tico: ${product.currentStock} unidades` :\n                         `Stock bajo: ${product.currentStock} unidades`}\n                      </p>\n                    </div>\n                    <span className={`material-icons ${iconColor}`}>\n                      {alertLevel === 'critical' ? 'error' : \n                       alertLevel === 'low' ? 'warning' : 'info'}\n                    </span>\n                  </div>\n                </div>\n              );\n            })\n          ) : (\n            <div className=\"text-center py-4 text-muted-foreground\">\n              <span className=\"material-icons text-4xl opacity-50 mb-2 block\">inventory</span>\n              <p className=\"text-sm\">No hay alertas de stock.</p>\n            </div>\n          )}\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          className=\"w-full mt-4\"\n          data-testid=\"button-view-all-products\"\n          onClick={() => navigate(\"/productos\")}\n        >\n          Ver Todos los Productos\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3696},"client/src/components/dashboard/top-debtors.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\nexport default function TopDebtors() {\n  const [, navigate] = useLocation();\n  \n  const { data: debtors, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/top-debtors'],\n    retry: false,\n  });\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getAvatarColor = (index: number) => {\n    const colors = [\n      'bg-primary text-primary-foreground',\n      'bg-secondary text-secondary-foreground',\n      'bg-accent text-accent-foreground',\n    ];\n    return colors[index % colors.length];\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <span className=\"material-icons\">account_balance_wallet</span>\n            <span>Deudores Principales</span>\n          </CardTitle>\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"text-debtors-count\">\n            {(debtors as any[])?.length || 0} clientes\n          </span>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-3\">\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"flex items-center justify-between p-3 bg-muted rounded-lg animate-pulse\">\n                  <div className=\"flex items-center space-x-3 flex-1\">\n                    <div className=\"w-10 h-10 bg-background rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-background rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-background rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"h-4 bg-background rounded w-16 mb-2\"></div>\n                    <div className=\"h-3 bg-background rounded w-12\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : debtors && (debtors as any[]).length > 0 ? (\n            (debtors as any[]).slice(0, 10).map((debtor: any, index: number) => (\n              <div key={debtor.id} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium ${getAvatarColor(index)}`}>\n                    {getInitials(debtor.name)}\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">{debtor.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Deuda actual: ${Number(debtor.currentDebt).toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <span className=\"font-bold text-red-600\">\n                    ${Number(debtor.currentDebt).toLocaleString()}\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"block mt-1 text-xs text-primary hover:underline p-0 h-auto\"\n                    data-testid={`button-collect-${debtor.id}`}\n                  >\n                    Cobrar\n                  </Button>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <span className=\"material-icons text-4xl opacity-50 mb-2 block\">account_balance_wallet</span>\n              <p>No hay deudores registrados.</p>\n              <p className=\"text-sm\">Los clientes con fiados aparecerÃ¡n aquÃ­.</p>\n            </div>\n          )}\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          className=\"w-full mt-4\"\n          data-testid=\"button-view-all-debtors\"\n          onClick={() => navigate(\"/clientes\")}\n        >\n          Ver Todos los Deudores\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4425},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\ninterface HeaderProps {\n  title?: string;\n  subtitle?: string;\n}\n\nexport default function Header({ title = \"Panel Principal\", subtitle }: HeaderProps) {\n  const currentDate = format(new Date(), \"EEEE, d 'de' MMMM 'de' yyyy\", { locale: es });\n\n  return (\n    <header className=\"bg-card border-b border-border p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">{title}</h2>\n          <p className=\"text-muted-foreground capitalize\">\n            {subtitle || currentDate}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {/* Estado de la API */}\n          <div className=\"flex items-center space-x-2 px-3 py-2 bg-green-100 text-green-800 rounded-lg\">\n            <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n            <span className=\"text-sm font-medium\">API Activa</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1110},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Panel Principal\", href: \"/\", icon: \"dashboard\" },\n  { name: \"Carga Diaria\", href: \"/carga-diaria\", icon: \"today\" },\n  { name: \"Productos\", href: \"/productos\", icon: \"inventory\" },\n  { name: \"Clientes\", href: \"/clientes\", icon: \"people\" },\n  { name: \"Proveedores\", href: \"/proveedores\", icon: \"local_shipping\" },\n  { name: \"Finanzas\", href: \"/finanzas\", icon: \"account_balance\" },\n  { name: \"API / Asistente\", href: \"/api-asistente\", icon: \"api\" },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-72 bg-sidebar border-r border-sidebar-border flex flex-col\">\n      <div className=\"p-6 border-b border-sidebar-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-sidebar-primary rounded-full flex items-center justify-center text-sidebar-primary-foreground font-bold text-lg\">\n            R&M\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-sidebar-foreground\">Sistema Central</h1>\n            <p className=\"text-sm text-muted-foreground\">R&M Store</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          return (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 p-3 rounded-lg font-medium transition-colors\",\n                  isActive\n                    ? \"bg-sidebar-primary text-sidebar-primary-foreground\"\n                    : \"text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <span className=\"material-icons text-xl\">{item.icon}</span>\n                <span>{item.name}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n      \n      <div className=\"p-4 border-t border-sidebar-border\">\n        <div className=\"flex items-center space-x-3 p-3 rounded-lg bg-muted\">\n          <span className=\"material-icons text-muted-foreground\">person</span>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-foreground\">DueÃ±o R&M</p>\n            <p className=\"text-xs text-muted-foreground\">Administrador</p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2610},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}